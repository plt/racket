3c3,6
< (define the-error "no-error")
---
> (define the-error "guarded mark reduction doesn't wrap results with a list/c")
> 
> ;; note: this bug was found and fixed during the development of this model
> ;; with commit: 4b848777d12a2e5b59b43c8e77f9f68b747d1151
224c227
<         (monitor (list/c ctc) (ccm mk t) k l j)
---
>         (monitor ctc (ccm mk t) k l j) 
326a330
> 
938a943
> 
948a954,979
> (define small-counter-example
>   (term
>    ;; (List Num)
>    (ccm 
>     ;; (Mark Num)
>     (MG ;; (Con Num)
>         (flat (λ (x : Num) (number? x)))
>         ;; (Mark Num)
>         (make-cm-key Num)
>         "k" "l" "j")
>     Num)))
> 
> (local 
>  ()
>  (define ctc-fun (term (λ (x : Num) (number? x))))
>  (test-equal (judgment-holds (tc · · ,ctc-fun (→ Num Bool))) #t)
>  (define ctc (term (flat ,ctc-fun)))
>  (test-equal (judgment-holds (tcc · · ,ctc (Con Num))) #t)
>  (define v (term (make-cm-key Num)))
>  (test-equal (judgment-holds (tc · · ,v (Mark Num))) #t)
>  (test-equal (redex-match? abort-lang l "k") #t)
>  (test-equal (redex-match? abort-lang l "l") #t)
>  (test-equal (redex-match? abort-lang l "j") #t)
>  ;; XXX This makes no sense, given the definition on line 495
>  (test-equal (judgment-holds (tc · · (MG ,ctc ,v "k" "l" "j") (Mark Num))) #t))
> (test-equal (check small-counter-example) #f)
