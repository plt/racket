3c3
< (define the-error "no error")
---
> (define the-error "replace all variables")
106c106
<   [(subst x x M_x)
---
>   [(subst x y M_x)
281,303c281,292
< ;; rewrite all βv redexes already in the term
< ;; (but not any new ones that might appear)
< (define-metafunction stlc
<   βv-> : M -> M
<   [(βv-> ((λ (x τ) M) v))  (subst (βv-> M) x (βv-> v))]
<   [(βv-> ((λ (x τ) M) y))  (subst (βv-> M) x y)]
<   [(βv-> (λ (x τ) M))      (λ (x τ) (βv-> M))]
<   [(βv-> (M N))            ((βv-> M) (βv-> N))]
<   [(βv-> M)                M])
< 
< ;; check : (or/c #f M) -> boolean[#f = counterexample found!]
< (define (check M)
<   (or (not M)
<       (let ([M-type (type-check M)])
<         (implies M-type
<                  (let* ([N (term (βv-> ,M))][N-type (type-check N)])
<                    (and (equal? N-type M-type)
<                         (let ([a1 (Eval M)] [a2 (Eval N)])
<                           (and (not (string? a1)) (not (string? a2)) 
<                                (equal? (term (answer ,a1)) (term (answer ,a2)))
<                                (or (equal? a1 'error)
<                                    (and (equal? (type-check a1) M-type)
<                                         (equal? (type-check a2) M-type)))))))))))
---
> (define (check term)
>   (or (not term)
>       (v? term)
>       (let ([t-type (type-check term)])
>         (implies
>          t-type
>          (let ([red-res (apply-reduction-relation red term)])
>            (and (= (length red-res) 1)
>                 (let ([red-t (car red-res)])
>                   (or (equal? red-t "error")
>                       (let ([red-type (type-check red-t)])
>                         (equal? t-type red-type))))))))))
307a297,300
> (define small-counter-example
>   (term ((λ (a (list int)) (λ (x int) x)) nil)))
> (test-equal (check small-counter-example) #f)
> 
