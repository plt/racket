3c3
< (define the-error "no error")
---
> (define the-error "var-set may skip a var with matching id (in reduction)")
44,45c44
<   [(where #t (different v v_2))
<    (var-set r v_2 a_2 r_2)
---
>   [(var-set r v_2 a_2 r_2)
113c112,113
<        (let ([closure (apply-reduction-relation* 
---
>        (let* ([stopped #f]
>               [closure (apply-reduction-relation* 
120c120,122
<                              (count . > . 1000)
---
>                              (count . > . 20)
>                              (when (count . > . 20)
>                                (set! stopped #t))
122,125c124,129
<          ;; if reduction terminates in less than 1000 steps, check it ends with halt
<          ;; (if the #:stop-when condition is true, we get back an empty list, 
<          ;; and the same thing for a reduction cycle)
<          (or (empty? closure)
---
>          ;; if reduction terminates in less than 20 steps, check it ends with halt
>          ;; (if there is a reduction cycle, the empty list is returned)
>          ;; (when the reduction is stopped artificially, the current term is returned)
>          ;; 20 is a small number, but some terms can get exponentially large
>          (or stopped
>              (empty? closure)
