#lang racket/base

(module test racket/base
  (require rackunit 
           racket/gui/base
           (only-in "text.rkt" do-find-string-all)
           racket/class)
  (define (txt s)
    (define t (new text%))
    (send t insert s)
    (send t set-position 0 0)
    t)
  (define (kmp-search txt str all?)
    (send txt do-find-string-all str 'forward 0 (send txt last-position) (not all?) #t #t #f))
  
  (check-equal? (kmp-search (txt "x") "x" #f) 0)
  (check-equal? (kmp-search (txt "yx") "x" #f) 1)
  (check-equal? (kmp-search (txt "yx") "yx" #f) 0)
  (check-equal? (kmp-search (txt "zyx") "yx" #f) 1)
  (check-equal? (kmp-search (txt "yyx") "yx" #f) 1)
  (check-equal? (kmp-search (txt "qqq") "yx" #f) #f)
  (check-equal? (kmp-search (txt "ABC ABCDAB ABCDABCDABDE") "ABCDABD" #f) 15)
  (check-equal? (kmp-search (txt "xxxx") "y" #t) '())
  (check-equal? (kmp-search (txt "xxxx") "x" #t) '(0 1 2 3))
  (check-equal? (kmp-search (txt "xyxy") "x" #t) '(0 2))
  (check-equal? (kmp-search (txt " x\n ") "x" #t) '(1))
  (check-equal? (kmp-search (txt "") "x" #t) '())
  (check-equal? (send (txt " x\n ") do-find-string-all "X" 'forward 0 'eof #f #t #f #f)
                '(1))
  (check-equal? (send (txt "xXxXxX") do-find-string-all "x" 'forward 0 'eof #f #t #f #f)
                '(0 1 2 3 4 5))
  (check-equal? (send (txt "xXxXxX") do-find-string-all "x" 'forward 2 4 #f #t #f #f)
                '(2 3))
  (check-equal? (send (txt "xyxyxyxyxyx") do-find-string-all "xy" 'forward 2 5 #f #t #t #f)
                '(2))
  (check-equal? (send (txt "abcdabcdabcd") do-find-string-all "abcd" 'forward 0 'eof #f #f #t #f)
                '(4 8 12))
  (check-equal? (send (txt "qqabcdabcdabcd") do-find-string-all "abcd" 'forward 0 'eof #t #f #t #f)
                6)
  (check-equal? (send (txt "qqabcdabcdabcd") do-find-string-all "abcd" 'forward 0 'eof #t #t #t #f)
                2)
  (check-equal? (send (txt "abcdabcdabcd") do-find-string-all "abcd" 'backward 12 0 #f #t #t #f)
                '(12 8 4))
  (check-equal? (send (txt "abcdabcdabcd") do-find-string-all "abcd" 'backward 12 0 #f #f #t #f)
                '(8 4 0))
  (check-equal? (send (txt "abcd\nabcdabcd") do-find-string-all "abcd" 'backward 12 0 #f #t #t #f)
                '(9 4))
  (check-equal? (send (txt "abcd\nabcdabcd") do-find-string-all "abcd" 'backward 13 0 #f #t #t #f)
                '(13 9 4))
  (check-equal? (send (txt "abcdabcd\nabcd") do-find-string-all "abcd" 'backward 12 0 #f #t #t #f)
                '(8 4))
  (check-equal? (send (txt "abcdabcd\nabcd") do-find-string-all "abcd" 'backward 13 0 #f #t #t #f)
                '(13 8 4))
  (check-equal? (send (txt "abcdabcd\nabcd") do-find-string-all "abcd" 'backward 8 0 #f #t #t #f)
                '(8 4))
  (check-equal? (send (txt "abcdabcd\nabcd") do-find-string-all "abcd" 'forward 4 13 #f #t #t #f)
                '(4 9))
  (check-equal? (send (txt "xyz") do-find-string-all "xyz" 'backward 3 0 #t #f #t #f)
                0)
  (check-equal? (send (txt "xyz") do-find-string-all "xyz" 'backward 3 0 #t #t #t #f)
                3)
  
  (let ([t1 (new text%)]
        [t2 (new text%)])
    (send t1 insert "abc")
    (send t1 insert (new editor-snip% [editor t2]))
    (send t1 insert "abc")
    (send t2 insert "abc")
    (check-equal? (send t1 do-find-string-all "abc" 'forward 0 (send t1 last-position) #f #t #t #t)
                  (list 0 (list t2 0) 4)))
  
  (let ([t1 (new text%)]
        [t2 (new text%)])
    (send t1 insert "abc")
    (send t1 insert (new editor-snip% [editor t2]))
    (send t1 insert "abc")
    (send t2 insert "abc")
    (check-equal? (send t1 do-find-string-all "abc" 'backward (send t1 last-position) 0 #f #t #t #t)
                  (list 7 (list t2 3) 3)))
  
  (let ([t1 (new text%)]
        [t2 (new text%)])
    (send t1 insert "abc")
    (send t1 insert (new editor-snip% [editor t2]))
    (send t1 insert "abcd")
    (send t2 insert "abc")
    (check-equal? (send t1 do-find-string-all "abcd" 'forward 0 (send t1 last-position) #t #t #t #t)
                  4))
  
  (let ([t1 (new text%)]
        [t2 (new text%)])
    (send t1 insert "abc")
    (send t1 insert (new editor-snip% [editor t2]))
    (send t1 insert "abc")
    (send t2 insert "abcd")
    (check-equal? (send t1 do-find-string-all "abcd" 'forward 0 (send t1 last-position) #t #t #t #t)
                  (cons t2 0)))
  
  (let ([t1 (new text%)]
        [t2 (new text%)]
        [pb (new pasteboard%)])
    (send t1 insert "abc")
    (send t1 insert (new editor-snip% [editor pb]))
    (send pb insert (new editor-snip% [editor t2]))
    (send t1 insert "abc")
    (send t2 insert "abcd")
    (check-equal? (send t1 do-find-string-all "abcd" 'forward 0 (send t1 last-position) #t #t #t #t)
                  (list* pb t2 0)))
  
  (let ([t1 (new text%)]
        [t2 (new text%)]
        [t3 (new text%)]
        [pb (new pasteboard%)])
    (send t1 insert "abc")
    (send t1 insert (new editor-snip% [editor pb]))
    (send pb insert (new editor-snip% [editor t2]))
    (send pb insert (new editor-snip% [editor t3]))
    (send t1 insert "abc")
    (send t2 insert "abcd")
    (send t3 insert "abcd")
    (check-equal? (send t1 do-find-string-all "abcd" 'forward 0 (send t1 last-position) #f #t #t #t)
                  (list (list pb (list t2 0) (list t3 0)))))
  
  (let ([t1 (new text%)])
    (send t1 insert "abc")
    (define es (new editor-snip%))
    (send t1 insert es)
    (send t1 insert "abc")
    (check-equal? (send t1 do-find-string-all "abcd" 'forward 0 (send t1 last-position) #f #t #t #t)
                  '()))
  
  (let ([t1 (new text%)]
        [pb (new pasteboard%)])
    (send t1 insert "abc")
    (send t1 insert (new editor-snip% [editor pb]))
    (send t1 insert "abc")
    (send pb insert (new editor-snip%))
    (send pb insert (new editor-snip%))
    (check-equal? (send t1 do-find-string-all "abcd" 'forward 0 (send t1 last-position) #f #t #t #t)
                  '()))
    
  (check-equal? (send (txt "aaa") find-string-all "a") '(0 1 2)))
