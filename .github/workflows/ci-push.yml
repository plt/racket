name: CI

on: [push, pull_request]

jobs:
  
# Build jobs
# These jobs build each Racket component separately and tests on the component start as soon as each
# component finishes building.

  build-racketcgc:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macos-latest]
        cify: [cify, nocify]
          
    runs-on: ${{ matrix.os }}
    env:
      RACKET_EXTRA_CONFIGURE_ARGS: ""
    
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 100
    - name: Setup OS specific configure args
      if:  runner.os == 'macOS'
      run: echo "::set-env name=RACKET_EXTRA_CONFIGURE_ARGS::--enable-macprefix $RACKET_EXTRA_CONFIGURE_ARGS"
    - name: Setup cify if enabled
      if: matrix.cify == 'cify'
      run: echo "::set-env name=CIFY_OPTION::--enable-cify"
    - name: Setup cify if disabled
      if: matrix.cify == 'nocify'
      run: echo "::set-env name=CIFY_OPTION::--disable-cify"
    - name: Configuring Racket CGC
      working-directory: ./racket/src
      run: >
        ./configure 
        --prefix=${{ runner.temp }}/racketcgc
        --enable-werror
        $RACKET_EXTRA_CONFIGURE_ARGS 
        --enable-cgcdefault 
        --enable-jit 
        --enable-foreign 
        --enable-places 
        --enable-futures 
        --enable-float
        $CIFY_OPTION
        --enable-pthread
        --disable-docs 
    - name: Building
      working-directory: ./racket/src
      run: |
        export cpus=$(grep -c ^processor /proc/cpuinfo)
        make -l $cpus -j $((cpus+1))
    - name: Installing
      working-directory: ./racket/src
      run: make -j  $((cpus+1)) install
    - name: Tarballing
      working-directory: ${{ runner.temp }}
      run: tar -cvjf racketcgc-${{ matrix.os }}-${{ matrix.cify }}-x64_git${{ github.sha }}.tar.bz2 racketcgc
    - uses: actions/upload-artifact@v1
      with:
        name: racketcgc-${{ matrix.os }}-${{ matrix.cify }}-x64_git${{ github.sha }}
        path: ${{ runner.temp }}/racketcgc-${{ matrix.os }}-${{ matrix.cify }}-x64_git${{ github.sha }}.tar.bz2

  build-racket3m:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macos-latest]
        cc: [gcc, clang]
        cify: [cify, nocify]
        jit: [jit, nojit]
        efp: [efp, noefp]
        exclude:
          - os: macos-latest
            cc: gcc
          - jit: nojit
            efp: efp
            
    runs-on: ${{ matrix.os }}
    needs: build-racketcgc
    
    env:
      RACKET_EXTRA_CONFIGURE_ARGS: ""
    
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 100
    - name: Setup OS specific configure args
      if:  runner.os == 'macOS'
      run: echo "::set-env name=RACKET_EXTRA_CONFIGURE_ARGS::--enable-macprefix $RACKET_EXTRA_CONFIGURE_ARGS"
    - name: Setup cify if enabled
      if: matrix.cify == 'cify'
      run: echo "::set-env name=CIFY_OPTION::--enable-cify"
    - name: Setup cify if disabled
      if: matrix.cify == 'nocify'
      run: echo "::set-env name=CIFY_OPTION::--disable-cify"
    - name: Setup jit if enabled
      if: matrix.jit == 'jit'
      run: echo "::set-env name=JIT_OPTION::--enable-jit"
    - name: Setup jit if disabled
      if: matrix.jit == 'nojit'
      run: echo "::set-env name=JIT_OPTION::--disable-jit"
    - name: Setup efp if enabled
      if: matrix.efp == 'efp'
      run: echo "::set-env name=EFP_OPTIONS::--enable-extflonums --enable-places --enable-futures"
    - name: Setup efp if disabled
      if: matrix.efp == 'noefp'
      run: echo "::set-env name=EFP_OPTIONS::--disable-extflonums --disable-places --disable-futures"
    - uses: actions/download-artifact@v1
      with:
        name: racketcgc-${{ matrix.os }}-nocify-x64_git${{ github.sha }}
        path: ${{ runner.temp }}
    - name: Untar
      working-directory: ${{ runner.temp }}
      run: tar -xvjf racketcgc-${{ matrix.os }}-nocify-x64_git${{ github.sha }}.tar.bz2
    - name: Configuring Racket 3m
      working-directory: ./racket/src
      env:
        CC: ${{ matrix.cc }}
      run: >
        ./configure
        --prefix=${{ runner.temp }}/racket3m
        --enable-werror
        $RACKET_EXTRA_CONFIGURE_ARGS 
        --enable-racket=${{ runner.temp }}/racketcgc/bin/racket 
        --enable-foreign 
        --enable-float 
        --disable-docs 
        $CIFY_OPTION
        $JIT_OPTION
        $EFP_OPTIONS
        --enable-pthread
    - name: Building
      working-directory: ./racket/src
      run: |
        export cpus=$(grep -c ^processor /proc/cpuinfo)
        make -l $cpus -j $((cpus+1))
    - name: Installing
      working-directory: ./racket/src
      run: make -j $((cpus+1)) install
    # We build on Linux with clang and gcc and on MacOS with clang only.
    # However, it makes little sense to test both builds on Linux so we tarball the 
    # gcc build only. Therefore this condition ensure we only perform the tarball
    # and artifact upload on MacOS or (on Linux) if we are building with gcc.
    - name: Tarballing
      if: matrix.cc == 'gcc' || matrix.os == 'macos-latest'
      working-directory: ${{ runner.temp }}
      run: tar -cvjf racket3m-${{ matrix.os }}-${{ matrix.cify }}-${{ matrix.jit }}-${{ matrix.efp }}-x64_git${{ github.sha}}.tar.bz2 racket3m
    - uses: actions/upload-artifact@v1
      if: matrix.cc == 'gcc' || matrix.os == 'macos-latest'
      with:
        name: racket3m-${{ matrix.os }}-${{ matrix.cify }}-${{ matrix.jit }}-${{ matrix.efp }}-x64_git${{ github.sha }}
        path: ${{ runner.temp }}/racket3m-${{ matrix.os }}-${{ matrix.cify }}-${{ matrix.jit }}-${{ matrix.efp }}-x64_git${{ github.sha }}.tar.bz2

  build-racketcs:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macos-latest]
        cc: [gcc, clang]
        exclude:
          - os: macos-latest
            cc: gcc
        
    runs-on: ${{ matrix.os }}
    needs: build-racketcgc
    
    env:
      RACKET_EXTRA_CONFIGURE_ARGS: ""
      
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 100
    - name: Setup OS specific configure args
      if:  runner.os == 'macOS'
      run: echo "::set-env name=RACKET_EXTRA_CONFIGURE_ARGS::--enable-macprefix $RACKET_EXTRA_CONFIGURE_ARGS"
    - uses: actions/download-artifact@v1
      with:
        name: racketcgc-${{ matrix.os }}-nocify-x64_git${{ github.sha }}
        path: ${{ runner.temp }}
    - name: Untar
      working-directory: ${{ runner.temp }}
      run: tar -xvjf racketcgc-${{ matrix.os }}-nocify-x64_git${{ github.sha}}.tar.bz2
    - name: Install pkg dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install -y git uuid-dev
    - name: Checking out ChezScheme
      working-directory: ./racket/src
      run: git clone --depth=1 --recurse-submodules -j3 https://github.com/racket/ChezScheme
    - name: Configuring Racket CS
      working-directory: ./racket/src
      env:
        CC: ${{ matrix.cc }}
      run: >
        ./configure 
        --prefix=${{ runner.temp }}/racketcs
        $RACKET_EXTRA_CONFIGURE_ARGS
        --enable-racket=${{ runner.temp }}/racketcgc/bin/racket 
        --enable-compress 
        --disable-docs 
        --enable-pthread 
        --enable-csdefault 
        --enable-csonly
    - name: Building
      working-directory: ./racket/src
      run: |
        export cpus=$(grep -c ^processor /proc/cpuinfo)
        make -l $cpus -j $((cpus+1))
    - name: Installing
      working-directory: ./racket/src
      run: make -j  $((cpus+1)) install
    - name: Tarballing
      if: matrix.cc == 'gcc' || matrix.os == 'macos-latest'
      working-directory: ${{ runner.temp }}
      run: tar -cvjf racketcs-${{ matrix.os }}-x64_git${{ github.sha}}.tar.bz2 racketcs
    - uses: actions/upload-artifact@v1
      if: matrix.cc == 'gcc' || matrix.os == 'macos-latest'
      with:
        name: racketcs-${{ matrix.os }}-x64_git${{ github.sha }}
        path: ${{ runner.temp }}/racketcs-${{ matrix.os }}-x64_git${{ github.sha }}.tar.bz2

  build-win:
    runs-on: windows-latest

    # According to
    # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/software-installed-on-github-hosted-runners#windows-server-2019
    # VS2019 is what is installed in the hosted runners:
    #   Version: VisualStudio/16.3.6+29418.71
    #   Location: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise
    steps:
    - uses: actions/checkout@v1
    - name: Build
      working-directory: .\racket\src\worksp
      shell: cmd
      run: |
        call msvcprep.bat x86_amd64
        call build.bat
        call ..\..\racket.exe csbuild.rkt -- --recurse-submodules --depth=1

  # Tests
  # Unfortunately Actions does not support atm yaml anchors
  # otherwise all the following jobs could be simplified
  # Note: the reason we cannot transform this into a matrix
  # build is because we cannot use variables in the needs keyword.
  test-cgc:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macos-latest]
        cify: [cify, nocify]

    runs-on: ${{ matrix.os }}

    needs: build-racketcgc

    steps:
      - uses: actions/checkout@v1
      - uses: actions/download-artifact@v1
        with:
          name: racketcgc-${{ matrix.os }}-${{ matrix.cify }}-x64_git${{ github.sha }}
          path: ${{ runner.temp }}
      - name: Untar
        working-directory: ${{ runner.temp }}
        run: tar -xvjf racketcgc-${{ matrix.os }}-${{ matrix.cify }}-x64_git${{ github.sha }}.tar.bz2
      - name: Extend PATH with Racket executable
        working-directory: ${{ runner.temp }}
        run: echo "::set-env name=PATH::$PWD/racketcgc/bin:$PATH"
      - name: Check for Racket
        run: racket --version
      - name: Install catalog
        run: |
          racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
          raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
      - name: Install racket-test dependency
        run: raco pkg install --auto racket-test
      - name: Run tests/racket/test
        run: raco test -l tests/racket/test
      - name: Run tests/racket/contract/all
        run: racket -l tests/racket/contract/all
      - name: Run tests/json/json
        run: raco test -l tests/json/json
      - name: Run tests/file/main
        run: raco test -l tests/file/main
      - name: Run tests/net/head
        run: raco test -l tests/net/head
      - name: Run tests/net/uri-codec
        run: raco test -l tests/net/uri-codec
      - name: Run tests/net/url
        run: raco test -l tests/net/url
      - name: Run tests/net/url-port
        run: raco test -l tests/net/url-port
      - name: Run tests/net/encoders
        run: raco test -l tests/net/encoders
      - name: Run tests/openssl/basic
        run: raco test -l tests/openssl/basic
      - name: Run tests/openssl/https
        run: raco test -l tests/openssl/https
      - name: Run tests/match/main
        run: raco test -l tests/match/main
      - name: Run tests/zo-path
        run: raco test -l tests/zo-path
      - name: Run tests/xml
        run: raco test -c tests/xml
      - name: Run tests/stxparse
        run: raco test -c tests/stxparse
      - name: Install db tests dependency
        run: raco pkg install --auto db-test
      - name: Run db tests
        run: raco test -l tests/db/all-tests
      - name: Run syntax tests
        run: raco test -c tests/syntax

  test-3m:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macos-latest]
        cify: [cify, nocify]
        jit: [jit, nojit]
        efp: [efp, noefp]
        exclude:
          - jit: nojit
            efp: efp
            
    runs-on: ${{ matrix.os }}

    needs: build-racket3m

    steps:
      - uses: actions/checkout@v1
      - uses: actions/download-artifact@v1
        with:
          name: racket3m-${{ matrix.os }}-${{ matrix.cify }}-${{ matrix.jit }}-${{ matrix.efp }}-x64_git${{ github.sha }}
          path: ${{ runner.temp }}
      - name: Untar
        working-directory: ${{ runner.temp }}
        run: tar -xvjf racket3m-${{ matrix.os }}-${{ matrix.cify }}-${{ matrix.jit }}-${{ matrix.efp }}-x64_git${{ github.sha }}.tar.bz2
      - name: Extend PATH with Racket executable
        working-directory: ${{ runner.temp }}
        run: echo "::set-env name=PATH::$PWD/racket3m/bin:$PATH"
      - name: Check for Racket
        run: racket --version
      - name: Install catalog and required packages
        run: |
          racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
          raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
      - name: Install racket-test dependency
        run: raco pkg install --auto racket-test
      - name: Run tests/racket/test
        run: raco test -l tests/racket/test
      - name: Run tests/racket/contract/all
        run: racket -l tests/racket/contract/all
      - name: Run tests/json/json
        run: raco test -l tests/json/json
      - name: Run tests/file/main
        run: raco test -l tests/file/main
      - name: Run tests/net/head
        run: raco test -l tests/net/head
      - name: Run tests/net/uri-codec
        run: raco test -l tests/net/uri-codec
      - name: Run tests/net/url
        run: raco test -l tests/net/url
      - name: Run tests/net/url-port
        run: raco test -l tests/net/url-port
      - name: Run tests/net/encoders
        run: raco test -l tests/net/encoders
      - name: Run tests/openssl/basic
        run: raco test -l tests/openssl/basic
      - name: Run tests/openssl/https
        run: raco test -l tests/openssl/https
      - name: Run tests/match/main
        run: raco test -l tests/match/main
      - name: Run tests/zo-path
        run: raco test -l tests/zo-path
      - name: Run tests/xml
        run: raco test -c tests/xml
      - name: Run tests/stxparse
        run: raco test -c tests/stxparse
      - name: Install db tests dependency
        run: raco pkg install --auto db-test
      - name: Run db tests
        run: raco test -l tests/db/all-tests
          
  test-cs:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macos-latest]

    runs-on: ${{ matrix.os }}

    needs: build-racketcs

    steps:
      - uses: actions/checkout@v1
      - uses: actions/download-artifact@v1
        with:
          name: racketcs-${{ matrix.os }}-x64_git${{ github.sha }}
          path: ${{ runner.temp }}
      - name: Untar
        working-directory: ${{ runner.temp }}
        run: tar -xvjf racketcs-${{ matrix.os }}-x64_git${{ github.sha }}.tar.bz2
      - name: Extend PATH with Racket executable
        working-directory: ${{ runner.temp }}
        run: echo "::set-env name=PATH::$PWD/racketcs/bin:$PATH"
      - name: Check for Racket
        run: racket --version
      - name: Install catalog and required packages
        run: |
          racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
          raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
      - name: Install racket-test dependency
        run: raco pkg install --auto racket-test
      - name: Run tests/racket/test
        run: raco test -l tests/racket/test
      - name: Run tests/racket/contract/all
        run: racket -l tests/racket/contract/all
      - name: Run tests/json/json
        run: raco test -l tests/json/json
      - name: Run tests/file/main
        run: raco test -l tests/file/main
      - name: Run tests/net/head
        run: raco test -l tests/net/head
      - name: Run tests/net/uri-codec
        run: raco test -l tests/net/uri-codec
      - name: Run tests/net/url
        run: raco test -l tests/net/url
      - name: Run tests/net/url-port
        run: raco test -l tests/net/url-port
      - name: Run tests/net/encoders
        run: raco test -l tests/net/encoders
      - name: Run tests/openssl/basic
        run: raco test -l tests/openssl/basic
      - name: Run tests/openssl/https
        run: raco test -l tests/openssl/https
      - name: Run tests/match/main
        run: raco test -l tests/match/main
      - name: Run tests/zo-path
        run: raco test -l tests/zo-path
      - name: Run tests/xml
        run: raco test -c tests/xml
      - name: Run tests/stxparse
        run: raco test -c tests/stxparse
      - name: Install db tests dependency
        run: raco pkg install --auto db-test
      - name: Run db tests
        run: raco test -l tests/db/all-tests

#
# Jobs to scan-build racket
# 
  scanbuild-racketcgc:

    runs-on: ubuntu-latest
    container: pmatos/scan-build:latest
    
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 100
    - name: Install dependencies
      run: |
        apt-get update
        apt-get install -y libffi-dev unzip python libxml2-dev libfindbin-libs-perl make gcc g++
    - name: Configure
      working-directory: ./racket/src
      run: >
        ./configure
        CFLAGS="-O0 -g"
        --disable-strip
        --prefix=${{ runner.temp }}/racketcgc
        --enable-werror
        --enable-cify
        --enable-cgcdefault 
        --enable-jit 
        --enable-foreign 
        --enable-places 
        --enable-futures 
        --enable-float
        --enable-pthread
        --disable-docs 
    - name: Scan Build
      working-directory: ./racket/src
      run: |
        export cpus=$(grep -c ^processor /proc/cpuinfo)
        scan-build -o ../../racketcgc-report -analyzer-config 'crosscheck-with-z3=true' make -j$((cpus + 1))
    - name: Tarballing
      run: tar -cvjf racketcgc-report-${{ github.sha }}.tar.bz2 racketcgc-report
    - uses: actions/upload-artifact@v1
      if: always()
      with:
        name: scanbuild-cgc-${{ github.sha }}
        path: racketcgc-report-${{ github.sha }}.tar.bz2

  scanbuild-racket3m:

    runs-on: ubuntu-latest
    container: pmatos/scan-build:latest
    needs: build-racketcgc

    env:
      RUNNER_TEMP: "/__w/_temp"
    
    steps:
    - name: Workaround temp issues
      run: |
        mkdir -p ${{ runner.temp }}
        cd ${{ runner.temp }}/..
        rmdir ${{ runner.temp }}
        ln -s ${RUNNER_TEMP} ${{ runner.temp }}
    - uses: actions/checkout@v1
      with:
        fetch-depth: 100
    - name: Install dependencies
      run: |
        apt-get update
        apt-get install -y libffi-dev unzip python libxml2-dev libfindbin-libs-perl make gcc g++
    - uses: actions/download-artifact@v1
      with:
        name: racketcgc-ubuntu-18.04-cify-x64_git${{ github.sha }}
        path: ${{ runner.temp }}
    - name: Untar
      working-directory: ${{ runner.temp }}
      run: tar -xvjf racketcgc-ubuntu-18.04-cify-x64_git${{ github.sha }}.tar.bz2
    - name: Configure
      working-directory: ./racket/src
      run: >
        ./configure
        CFLAGS="-O0 -g"
        --disable-strip
        --prefix=${RUNNER_TEMP}/racket3m
        --enable-racket=${RUNNER_TEMP}/racketcgc/bin/racket
        --enable-werror
        --enable-cify
        --enable-jit 
        --enable-foreign 
        --enable-places 
        --enable-futures 
        --enable-float
        --enable-pthread
        --disable-docs 
    - name: Scan Build
      working-directory: ./racket/src
      run: |
        export cpus=$(grep -c ^processor /proc/cpuinfo)
        scan-build -o ../../racket3m-report -analyzer-config 'crosscheck-with-z3=true' make -j$((cpus + 1))
    - name: Tarballing
      run: tar -cvjf racket3m-report-${{ github.sha }}.tar.bz2 racket3m-report
    - uses: actions/upload-artifact@v1
      if: always()
      with:
        name: scanbuild-3m-${{ github.sha }}
        path: racket3m-report-${{ github.sha }}.tar.bz2

  scanbuild-racketcs:
        
    runs-on: ubuntu-18.04
    container: pmatos/scan-build:latest
    needs: build-racketcgc

    env:
      RUNNER_TEMP: "/__w/_temp"
      
    steps:
    - name: Workaround temp issues
      run: |
        mkdir -p ${{ runner.temp }}
        cd ${{ runner.temp }}/..
        rmdir ${{ runner.temp }}
        ln -s ${RUNNER_TEMP} ${{ runner.temp }}
    - uses: actions/checkout@v1
      with:
        fetch-depth: 100
    - name: Install pkg dependencies
      run: |
        apt update
        apt install -y libffi-dev unzip python libxml2-dev libfindbin-libs-perl make gcc g++ git uuid-dev
    - uses: actions/download-artifact@v1
      with:
        name: racketcgc-ubuntu-18.04-cify-x64_git${{ github.sha }}
        path: ${{ runner.temp }}
    - name: Untar
      working-directory: ${{ runner.temp }}
      run: tar -xvjf racketcgc-ubuntu-18.04-cify-x64_git${{ github.sha}}.tar.bz2
    - name: Checking out ChezScheme
      working-directory: ./racket/src
      run: git clone --depth=1 --recurse-submodules -j3 https://github.com/racket/ChezScheme
    - name: Configuring Racket CS
      working-directory: ./racket/src
      env:
        CC: ${{ matrix.cc }}
      run: >
        ./configure
        CFLAGS="-O0 -g"
        --prefix=${RUNNER_TEMP}/racketcs
        $RACKET_EXTRA_CONFIGURE_ARGS
        --enable-racket=${RUNNER_TEMP}/racketcgc/bin/racket 
        --enable-compress 
        --disable-docs 
        --enable-pthread 
        --enable-csdefault 
        --enable-csonly
    - name: Building
      working-directory: ./racket/src
      run: |
        export cpus=$(grep -c ^processor /proc/cpuinfo)
        scan-build -o ../../racketcs-report -analyzer-config 'crosscheck-with-z3=true' make -j $((cpus+1))
    - name: Tarballing
      run: tar -cvjf racketcs-report-${{ github.sha }}.tar.bz2 racketcs-report
    - uses: actions/upload-artifact@v1
      if: always()
      with:
        name: scanbuild-cs-${{ github.sha }}
        path: racketcs-report-${{ github.sha }}.tar.bz2
        
  create-installer3m:        
    runs-on: ubuntu-18.04
      
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 10
    - name: Install pkg dependencies
      run: |
        sudo apt update
        sudo apt install -y libffi-dev unzip python libxml2-dev libfindbin-libs-perl make gcc g++ git uuid-dev
    - uses: Bogdanp/setup-racket@v0.7
      with:
          architecture: 'x64'
          distribution: 'full'
          variant: 'regular'
          version: 'current'
          
    - name: Create site.rkt
      run: |
        which racket
        echo "#lang distro-build/config" > ${{ runner.temp }}/site.rkt
        echo "(machine #:racket \"/usr/bin/racket\" #:versionless? #true #:pkgs (list))" >> ${{ runner.temp }}/site.rkt
        cat ${{ runner.temp }}/site.rkt
    - name: Building
      run: |
        export cpus=$(grep -c ^processor /proc/cpuinfo)
        make installers RACKET=/usr/bin/racket CONFIG="${{ runner.temp }}/site.rkt" -j $((cpus+1))
        mv bundle/ ${{ github.sha }}/
    - uses: actions/upload-artifact@v1
      if: always()
      with:
        name: racket3m-installer-${{ github.sha }}
        path: ${{ github.sha }}/racket-x86_64-linux.sh


    - name: S3 Sync
      uses: jakejarvis/s3-sync-action@v0.5.1
      with:
        args: --acl public-read --exclude '*' --include '${{ github.sha }}/racket-x86_64-linux.sh'
      env:
        AWS_S3_BUCKET: snapshot.racket-lang.org
        AWS_ACCESS_KEY_ID: ${{ secrets.AWSAccessKeyID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWSSecretKey }}
        DEST_DIR: 'ci-snapshots/'
        
