#lang racket

(require racket/fixnum)

(define prop-map
  (hash "Other" '(0 . "other")
        "Prepend" '(1 . "prepend")
        "CR" '(2 . "cr")
        "LF" '(3 . "lf")
        "Control" '(4 . "control")
        "Extend" '(5 . "extend")
        "Regional_Indicator" '(6 . "regional-indicator")
        "SpacingMark" '(7 . "spacing-mark")
        "L" '(8 . "l")
        "V" '(9 . "v")
        "T" '(10 . "t")
        "LV" '(11 . "lv")
        "LVT" '(12 . "lvt")
        "ZWJ" '(13 . "zwj")
        "Extended_Pictographic" '(14 . "extended-pictographic")))

;; We need 4 bits per code point to store the grapheme info, so
;; let's map each even code point N to the low 4 bits of index N/2
;; and N+1 to the high 4 bits.
(define num-code-points #x110000)
(define block-size 256)
(define cp/block (* block-size 2))
(define num-blocks (quotient num-code-points cp/block))
(define table
  (build-vector num-blocks
                (λ (_) (make-bytes block-size))))

(define (get-code-point i)
  (define j (quotient i 2))
  (define block-idx (quotient j block-size))
  (define byte-idx (remainder j block-size))
  (define block (vector-ref table block-idx))
  (define byte (bytes-ref block byte-idx))

  (fxand (fxrshift byte (fxlshift (fxand i 1) 2)) #x0F))

(define (set-code-point! i val)
  (define j (quotient i 2))
  (define block-idx (quotient j block-size))
  (define byte-idx (remainder j block-size))
  (define block (vector-ref table block-idx))
  (define byte (bytes-ref block byte-idx))
  (define shift (fxlshift (fxand i 1) 2))

  (bytes-set! block
              byte-idx
              (fxior (fxand byte (fxrshift #xF0 shift))
                     (fxlshift val shift))))

(define (name->prop name)
  (match (hash-ref prop-map name #f)
    [(cons id _) id]
    [_ #f]))

(define (hex->int str)
  (string->number str 16))

(define (collect filename fn)
  (call-with-input-file filename
    (λ (in)
      (for ([line (in-lines in)])
        (match line
          [(regexp #rx"^([0-9A-Z]+) *; ([^ #]+) *#"
                   (list _ (app hex->int cp) name))
           (fn cp cp name)]
          [(regexp #rx"^([0-9A-Z]+)..([0-9A-Z]+) *; ([^ #]+) *#"
                   (list _ (app hex->int lo) (app hex->int hi) name))
           (fn lo hi name)]
          [_
           (void)])))))

;; First, collect grapheme cluster break property values for all
;; code points except the ones with the default value ("Other").
(collect "Unicode/GraphemeBreakProperty.txt"
         (λ (lo hi prop-name)
           (define prop (name->prop prop-name))

           (unless prop
             (error "unknown grapheme cluster break property value: ~a" prop-name))

           (for ([i (in-range lo (add1 hi))])
             (set-code-point! i prop))))

;; Then, find the code points that have the Extended_Pictographic
;; property and verify that all of them have the default value for
;; the grapheme cluster break property. That way, we can treat
;; Extended_Pictographic as if it *is* a grapheme cluster break
;; property.
(collect "Unicode/emoji-data.txt"
         (λ (lo hi prop-name)
           (when (equal? prop-name "Extended_Pictographic")
             (define prop (name->prop prop-name))

             (for ([i (in-range lo (add1 hi))])
               (unless (= 0 (get-code-point i))
                 (error "grapheme cluster break property isn't disjoint from extended pictographic"))
               (set-code-point! i prop)))))

;; De-duplicate any equivalent byte strings in the table.
(define cache (make-hash))
(define unique-bytestrings
  (let ([counter 0])
    (for/list ([block (in-vector table)]
               #:unless (hash-has-key? cache block))
      (hash-set! cache block counter)
      (set! counter (add1 counter))
      block)))

(define (c-hex b)
  (string-append "0x" (~r b #:base 16 #:min-width 2 #:pad-string "0")))

(define (print-block idx bstr last?)
  (printf " /* ~a */\n" idx)
  (for ([slice (in-slice 16 (in-list (map c-hex (bytes->list bstr))))]
        [i (in-naturals)])
    (cond
      [(and last? (= i 15))
       (printf " ~a\n" (string-join slice ", "))]
      [else
       (printf " ~a\n" (string-join slice ", " #:after-last ","))])))

(with-output-to-file "schuchar_grapheme.inc" #:exists 'truncate/replace
  (λ ()
    (printf "/* Generated by mk-uchar-grapheme.rkt */\n\n")

    (define num-prop-vals (hash-count prop-map))
    (printf "#define NUM_GRAPHEME_BREAK_PROPERTY_VALUES ~a\n" num-prop-vals)
    (printf "READ_ONLY static const char *grapheme_break_property_values[] = {\n")
    (for ([item (in-list (sort (hash-values prop-map) < #:key car))]
          [i (in-naturals)])
      (printf " \"~a\"~a\n"
              (cdr item)
              (if (= i (sub1 num-prop-vals))
                  ""
                  ",")))
    (printf "};\n\n")

    (printf "/* Grapheme cluster break properties */\n")
    (printf "/* Maps a character to a nibble indicating its grapheme break property\n")
    (printf "   via the scheme_grapheme_break_property() macro in scheme.h. */\n")
    (printf "READ_ONLY unsigned char *scheme_uchar_grapheme_break_table[~a];\n\n" num-blocks)

    (printf "/* Grapheme cluster break data */\n")
    (printf "READ_ONLY unsigned char scheme_uchar_grapheme_data[] = {\n")
    (let loop ([i 0] [xs unique-bytestrings])
      (match xs
        [(list)
         (void)]
        [(list x)
         (print-block i x #t)]
        [(cons x xs)
         (print-block i x #f)
         (loop (add1 i) xs)]))
    (printf "};\n\n")

    (printf "static void init_uchar_grapheme_break_table() {\n")
    (printf "  int i;\n\n")

    (let loop ([i 0] [xs (map (λ (block) (hash-ref cache block)) (vector->list table))])
      (match xs
        [(cons x xs)
         (define-values (same rest) (splitf-at xs (λ (y) (= x y))))
         (define same-len (length same))

         (cond
           [(> same-len 3)
            (printf "  for (i = ~a; i < ~a; i++) {\n" i (+ i same-len 1))
            (printf "    scheme_uchar_grapheme_break_table[i] = scheme_uchar_grapheme_data + ~a;\n"
                    (* x block-size))
            (printf "  }\n")
            (loop (+ i same-len 1) rest)]
           [else
            (printf "  scheme_uchar_grapheme_break_table[~a] = scheme_uchar_grapheme_data + ~a;\n"
                    i (* x block-size))
            (loop (add1 i) xs)])]
        [_
         (void)]))

    (printf "}\n")))
