#lang zuo
(require "../makefiles/lib.zuo"
         "lib.zuo")

(define (targets at-dir [vars (hash)])
  (define config (win-config (config-file->hash (at-dir "../Mf-config"))))
  (define (lookup key) (or (hash-ref vars key #f)
                           (hash-ref config key #f)))

  (define m (hash-ref config 'm))

  (define (at-mach file)
    (at-dir (build-path "../boot" m file)))

  (define arch (m->arch m))

  (define (or-windows .c)
    (if (lookup 'forWindows)
	"windows.c"
	.c))
  (define (add-windows l)
    (if (and (lookup 'forWindows)
             (not (member "windows.c" l)))
        (cons "windows.c" l)
        l))

  (define cpu+arch.c
    (cond
      [(string=? arch "a6")
       (cons "X86_64"
             (or-windows "i3le.c"))]
      [(string=? arch "i3")
       (cons "I386"
             (or-windows "i3le.c"))]
      [(string=? arch "arm32")
       (cons "ARMV6"
             "arm32le.c")]
      [(string=? arch "arm64")
       (cons "AARCH64"
             (or-windows "arm32le.c"))]
      [(string=? arch "ppc32")
       (cons "PPC32"
             "ppc32.c")]
      [(glob-match? "pb*" "pb")
       (cons "PORTABLE_BYTECODE"
             "pb.c")]
      [else (error "unrecognized arch")]))
  (define cpu (car cpu+arch.c))
  (define arch.c (cdr cpu+arch.c))

  ;; sources for "kernel.o":
  (define kernel-src-files
    (add-windows
     (list "statics.c" "segment.c" "alloc.c" "symbol.c" "intern.c"
           "gcwrapper.c" "gc-011.c" "gc-par.c" "gc-ocd.c" "gc-oce.c"
           "number.c" "schsig.c" "io.c" "new-io.c" "print.c" "fasl.c" "vfasl.c"
           "stats.c" "foreign.c" "prim.c" "prim5.c" "flushcache.c"
           "schlib.c" "thread.c" "expeditor.c" "scheme.c" "compress-io.c"
           "random.c" "ffi.c"
           arch.c)))
  (define kernel-srcs
    (map at-source kernel-src-files))
  (define kernel-srcobjs
    (map at-dir (map .c->.o (append kernel-src-files))))

  (define kernel-asm-files
    (if (glob-match? "*nt" (or (lookup 'defaultm) m))
	(cond
	 [(string=? arch "a6")
	  (list "a6nt-jump.asm")]
	 [(string=? arch "arm64")
	  (list "arm64nt-jump.asm")]
	 [else '()])
	'()))
  (define kernel-asms
    (map at-source kernel-asm-files))
  (define kernel-asmobjs
    (map at-dir (map .c->.o (append kernel-asm-files))))
  
  (define kernel-objs
    (append kernel-srcobjs kernel-asmobjs))

  ;; every kernel object depends on these:
  (define kernel-hdrs
    (append
     (map at-source
          (list "system.h" "types.h" "version.h" "globals.h" "externs.h" "segment.h"
                "atomic.h" "thread.h" "sort.h" "compress-io.h"
                "nocurses.h" "popcount.h"))
     (map at-dir
          (list "config.h"))
     (map at-mach
          (list "equates.h"
                "scheme.h"))))

  (define main-src-files
    '("main.c"))
  (define main-srcs
    (map at-source main-src-files))
  (define main-objs
    (map at-dir (map .c->.o main-src-files)))

  (define main-hdrs
    (list (at-mach "scheme.h")
          (at-dir "config.h")))

  (define gc-wrap (list (at-source "gc.c")))

  (define exe (at-dir (build-path "../bin" m (.exe "scheme"))))
  (define kernel-lib (at-dir (build-path "../boot" m (.a "kernel"))))
  (define kernel.o (at-dir (build-path "../boot" m "kernel.o")))

  (define zlib-lib (at-dir (.a (~a "../zlib/" (if (eq? 'windows (system-type)) "zlib" "z")))))
  (define lz4-lib (at-dir (.a (~a "../lz4/lib/" (if (eq? 'windows (system-type)) "liblz4" "lz4")))))

  (define lz4-files (map at-source
                         ;; LZ4 is simple enough that we can list all
                         ;; the files that matter:
                         (list "../lz4/lib/lz4.h" "../lz4/lib/lz4frame.h"
                               "../lz4/lib/lz4.c" "../lz4/lib/lz4frame.c"
                               "../lz4/lib/lz4hc.c" "../lz4/lib/xxhash.c")))

  (define lib-deps (list zlib-lib lz4-lib))

  (define (compile-one .c .o)
    (c-compile .o .c
               (let* ([config (config-define config cpu)]
                      [config (config-merge config 'CPPFLAGS (or (lookup 'mdinclude) ""))])
                 (config-include config
                                 (at-dir (build-path "../boot" m))
                                 (at-dir ".")
                                 (at-dir "../lz4/lib")   ; FIXME
                                 (at-dir "../zlib")))))  ; FIXME

  (define (config-to-env)
    (foldl (lambda (key env)
	     (let ([v (hash-ref config key #f)])
	       (if v
		   (replace (cons (~a key) v)
			    env)
		   env)))
           (hash-ref (runtime-env) 'env)
           '(CC CFLAGS CPPFLAGS AR ARFLAGS RANLIB LDFLAGS)))

  (define (add-to-env vars env)
    (foldl (lambda (var=val env)
             (replace (glob-split "=*" var=val)
                      env))
           env
           (shell->strings vars)))

  (make-targets
   `([:target build (,exe)
              ,void]

     [:target ,exe (,kernel-lib ,@main-objs)
              ,(lambda (path token)
                 (mkdir* (path-only path))
                 (c-link path
                         (append main-objs
                                 (list kernel-lib
                                       zlib-lib
                                       lz4-lib))
                         config))]

     [:target ,kernel-lib (,@kernel-objs)
              ,(lambda (path token)
                 (c-ar path
                       kernel-objs
                       config))]

     [:target ,kernel.o (,@kernel-objs ,@lib-deps)
              ,(lambda (path token)
                 (mkdir* (path-only path))
                 (shell/wait (build-shell (lookup 'LD)
                                          "-r"
                                          "-X"
                                          (or (lookup 'mdldflags) "")
                                          "-o" (string->shell path)
                                          (build-shell (map string->shell kernel-objs))
                                          (string->shell zlib-lib)
                                          (string->shell lz4-lib))))]

     [:target ,zlib-lib ,(source-tree (at-source "../zlib"))
              ,(lambda (path token)
                 (cp* (at-source "../zlib") (at-dir "../zlib"))
                 (define zlib-dir (at-dir "../zlib"))
		 (cond
		  [(eq? 'windows (system-type))
		   ((dynamic-require (at-source "winlib.zuo") 'build-zlib) zlib-dir (as-dll? config))]
		  [else
                   (define configure-command
                     (build-shell "./configure" (hash-ref config 'zlibConfigureFlags)))
                   (shell/wait configure-command
                               (hash 'dir zlib-dir
                                     'env (add-to-env
                                           (hash-ref config 'zlibConfigureEnv)
                                           (config-to-env)))
                               "libz configure")
                   (define make-command (hash-ref config 'MAKE "make"))
                   (shell/wait make-command
                               (hash 'dir zlib-dir)
                               "zlib make")]))]

     [:target ,lz4-lib (,@lz4-files)
              ,(lambda (path token)
		 (define lz4-dir (at-dir "../lz4"))
                 (define lz4-lib-dir (build-path lz4-dir "lib"))
                 (cp* (at-source "../lz4") lz4-dir)
		 (cond
		  [(eq? 'windows (system-type))
		   ((dynamic-require (at-source "winlib.zuo") 'build-lz4) lz4-lib-dir config)]
		  [else
                   (define command (build-shell (hash-ref config 'MAKE "make") "liblz4.a"))
                   (shell/wait command
                               (hash 'dir lz4-lib-dir
                                     'env (config-to-env))
                               "lz4 make")]))]

     ,@(map (lambda (.c .o)
              `[:target ,.o (,.c ,@kernel-hdrs ,@lib-deps)
                        ,(lambda (.o target)
                           (compile-one .c .o))])
            kernel-srcs kernel-srcobjs)

     ,@(map (lambda (.asm .o)
              `[:target ,.o (,.asm)
                        ,(lambda (.o target)
                           (cond
                             [(string=? arch "arm64")
                              (shell/wait (build-shell "armasm64 -o"
                                                       (string->shell .o)
                                                       (string->shell .asm)))]
                             [(string=? arch "a6")
                              (shell/wait (build-shell "ml64 /c /Cx /Fo"
                                                       (string->shell .o)
                                                       (string->shell .asm)))]
                             [else (error "don't know how to assemble")]))])
            kernel-asms kernel-asmobjs)

     ,@(map (lambda (.c .o)
              `[:target ,.o (,.c ,@main-hdrs)
                        ,(lambda (.o target)
                           (compile-one .c .o))])
            main-srcs main-objs)

     [:depend ,(.c->.o "scheme.c") (,(at-source "itest.c"))]
     [:depend ,(.c->.o "gc-011.c") (,@gc-wrap ,(at-mach "gc-ocd.inc"))]
     [:depend ,(.c->.o "gc-ocd.c") (,@gc-wrap ,(at-mach "gc-ocd.inc"))]
     [:depend ,(.c->.o "gc-oce.c") (,@gc-wrap ,(at-mach "gc-oce.inc"))]
     [:depend ,(.c->.o "gc-par.c") (,@gc-wrap ,(at-mach "gc-par.inc"))]
     [:depend ,(.c->.o "gcwrapper.c") (,(at-mach "heapcheck.inc"))]

     [:depend ,(.c->.o "pb.c") (,(at-source "pb.h"))]

     [:target run ()
              ,(lambda (token . args)
                 (define p (process/args (target-path exe)
                                         args
                                         (hash 'exec? (eq? 'unix (system-type))
                                               'env (cons
                                                     (cons "SCHEMEHEAPDIRS" (at-dir (build-path "../boot/" m)))
                                                     (hash-ref (runtime-env) 'env)))))
                 (process-wait (hash-ref p 'process)))
              :command]

     ;; keep "_zuo.db" and "_zuo_tc.db" here instead of in "boot" and "bin" directories
     [:db-dir ,(at-dir ".")]

     #;(end-make-targets))))

(provide-targets targets)

(define (win-config config)
  (cond
    [(hash-ref config 'forWindows #f)
     (let* ([config (hash-set config 'CFLAGS
                              (~a "/nologo "
                                  (if (as-dll? config)
                                      "/MD"
                                      "/MT")
                                  " /Ox /W3 /Zi /DUSE_ANSI_PROTOTYPES /DWIN32 /D_CRT_SECURE_NO_WARNINGS"
                                  (if (glob-match? "pb*" (hash-ref config 'm))
                                      " /DFEATURE_WINDOWS"
                                      "")))]
            [config (hash-set config 'LDFLAGS (if (as-dll? config) "/MD" "/MT"))]
            [config (hash-set config 'LIBS (if (as-dll? config) "" "rpcrt4.lib ole32.lib advapi32.lib User32.lib"))])
       config)]
    [else config]))

(define (as-dll? config)
  (equal? (hash-ref config 'LINK_AS #f) "DLL"))
