# This makefile exists only to communicate configuration decisions
# to "build.zuo"

srcdir = @srcdir@

# If `RACKET` is set to something different than empty or `auto`, it
# must be a compatible Racket to the curent build in the sense that
# `require`s here to collection-based modules will work. The Racket
# built here will never be run, so it's suitable as a part of a
# cross-compile setup.
#
# If `BOOTFILE_RACKET` is set, then it needs only to be a Racket that
# is recent enough to run "../../ChezScheme/rktboot/main.rkt".
#
RACKET = @RACKET@
BOOTFILE_RACKET = @BOOTFILE_RACKET@

# If `SCHEME` is set, it must be compatible to the curren build.
# If `SCHEME_DIR` is set and `SCHEME` is not, then `SCHEME_DIR` refers
# to an existing build directory.
# If `RACKET` is "auto", then an auto-generated Scheme is used and
# both of these are ignored.
SCHEME = @SCHEME@
SCHEME_DIR = @SCHEME_DIR@

# The host machine type:
MACH = @MACH@

# The machine type to build, which is `MACH` unless cross building:
TARGET_MACH = @TARGET_MACH@
CROSS_MODE = @CROSS_MODE@
KERNEL_TARGET_MACH = @KERNEL_TARGET_MACH@

CC = @CC@
CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
LINK_DYNAMIC = @LINK_DYNAMIC@
AR = @AR@
ARFLAGS = @ARFLAGS@
RANLIB = @RANLIB@
WINDRES = @WINDRES@

BOOT_COMPRESS_COMP = @BOOT_COMPRESS_COMP@
MACLIBRKT_LINK_MODE = @MACLIBRKT_LINK_MODE@

SETUP_BOOT_MODE = @SETUP_BOOT_MODE@

STRIP_DEBUG = @STRIP_DEBUG@
STRIP_LIB_DEBUG = @STRIP_LIB_DEBUG@

RKTIO_CONFIGURE_ARGS = @RKTIO_CONFIGURE_ARGS@

COLLECTS_PATH = @COLLECTS_PATH@
CONFIG_PATH = @CONFIG_PATH@

CROSS_COMPILE_TARGET_KIND = @CROSS_COMPILE_TARGET_KIND@
PLT_CS_SLSP_SUFFIX = @PLT_CS_SLSP_SUFFIX@
INSTALL_LIBS_ENABLE = @INSTALL_LIBS_ENABLE@
FRAMEWORK_INSTALL_DIR = @FRAMEWORK_INSTALL_DIR@
FRAMEWORK_REL_INSTALL = @FRAMEWORK_REL_INSTALL@
CS_INSTALLED = @CS_INSTALLED@

ICP=@ICP@
ICP_LIB=@ICP_LIB@

SELF_ROOT_CONFIG_DIR =

INSTALL_SETUP_FLAGS = @INSTALL_SETUP_FLAGS@

prefix = @prefix@
exec_prefix = @exec_prefix@
datarootdir = @datarootdir@
bindir = @bindir@
libdir = @libdir@
includepltdir = @includepltdir@
libpltdir = @libpltdir@
libpltdir_rel = @libpltdir_rel@
etcpltdir = @etcpltdir@
sharepltdir = @sharepltdir@
collectsdir = @collectsdir@
configdir = @etcpltdir@

clean:
	cd $(SCHEME_WORKAREA); $(MAKE) clean
	cd rktio; $(MAKE) clean


# ----------------------------------------
# Unix

EMBED_DEPS = $(srcdir)/embed-boot.rkt

racketcs@NOT_OSX@@NOT_MINGW@: raw_racketcs petite-v.boot scheme-v.boot racket-v.boot $(EMBED_DEPS)
	$(BOOTSTRAP_RACKET) $(srcdir)/embed-boot.rkt --target $(TARGET_MACH) @BOOT_COMPRESS_COMP@ raw_racketcs racketcs petite-v.boot scheme-v.boot racket-v.boot
	@POST_LINKER@ racketcs
	$(RESTORE_SIGNATURE) racketcs

gracketcs@NOT_OSX@@NOT_MINGW@: raw_gracketcs petite-v.boot scheme-v.boot racket-v.boot $(EMBED_DEPS)
	$(BOOTSTRAP_RACKET) $(srcdir)/embed-boot.rkt --target $(TARGET_MACH) @BOOT_COMPRESS_COMP@ raw_gracketcs gracketcs petite-v.boot scheme-v.boot racket-v.boot
	@POST_LINKER@ gracketcs
	$(RESTORE_SIGNATURE) gracketcs

OWN_Z_LIB = $(SCHEME_TARGET_INC)/../../zlib/libz.a
OWN_LZ4_LIB = $(SCHEME_TARGET_INC)/../../lz4/lib/liblz4.a
SCHEME_LIB_DEPS = $(SCHEME_TARGET_INC)/libkernel.a @Z_LIB_DEP@ @LZ4_LIB_DEP@
SCHEME_LIBS = $(SCHEME_TARGET_INC)/libkernel.a @Z_LIB@ @LZ4_LIB@

PETITE_BOOT_plain = $(SCHEME_TARGET_INC)/petite.boot
PETITE_BOOT_pbchunk = petite-pbchunk.boot
PETITE_BOOT_IN = $(PETITE_BOOT_@PBCHUNK_MODE@)

SCHEME_BOOT_plain = $(SCHEME_TARGET_INC)/scheme.boot
SCHEME_BOOT_pbchunk = scheme-pbchunk.boot
SCHEME_BOOT_IN = $(SCHEME_BOOT_@PBCHUNK_MODE@)

RACKET_BOOT_plain = racket.boot
RACKET_BOOT_pbchunk = racket-pbchunk.boot
RACKET_BOOT_IN = $(RACKET_BOOT_@PBCHUNK_MODE@)

BOOT_EXTRA_OBJS_plain =
BOOT_EXTRA_OBJS_pbchunk = petite0.o petite1.o petite2.o petite3.o petite4.o \
                          petite5.o petite6.o petite7.o petite8.o petite9.o \
                          scheme0.o scheme1.o scheme2.o scheme3.o scheme4.o \
                          scheme5.o scheme6.o scheme7.o scheme8.o scheme9.o \
                          racket0.o racket1.o racket2.o racket3.o racket4.o \
                          racket5.o racket6.o racket7.o racket8.o racket9.o

BOOT_OBJ_DEPS = boot.o $(SCHEME_LIB_DEPS) rktio/librktio.a $(BOOT_EXTRA_OBJS_@PBCHUNK_MODE@)
BOOT_OBJS = boot.o $(SCHEME_LIBS) rktio/librktio.a $(BOOT_EXTRA_OBJS_@PBCHUNK_MODE@)

raw_racketcs@NOT_OSX@: main.o boot.o $(BOOT_OBJ_DEPS)
	$(CC) $(CFLAGS) -o raw_racketcs main.o $(BOOT_OBJS) $(LDFLAGS) $(LIBS) $(LINK_DYNAMIC)
	@POST_LINKER@ raw_racketcs

raw_gracketcs: grmain.o boot.o $(BOOT_OBJ_DEPS)
	$(CC) $(CFLAGS) -o raw_gracketcs grmain.o $(BOOT_OBJS) $(LDFLAGS) $(LIBS) $(LINK_DYNAMIC)
	@POST_LINKER@ raw_gracketcs

petite-v.boot: $(PETITE_BOOT_IN)
	$(SCHEME) --script $(srcdir)/to-vfasl.ss @BOOT_COMPRESS_COMP@ $(XPATCH@CROSS_MODE@) $(PETITE_BOOT_IN) petite-v.boot

scheme-v.boot: $(SCHEME_BOOT_IN)
	$(SCHEME) --script $(srcdir)/to-vfasl.ss @BOOT_COMPRESS_COMP@ $(XPATCH@CROSS_MODE@) $(SCHEME_BOOT_IN) scheme-v.boot petite

racket-v.boot: $(RACKET_BOOT_IN)
	$(SCHEME) --script $(srcdir)/to-vfasl.ss @BOOT_COMPRESS_COMP@ $(XPATCH@CROSS_MODE@) $(RACKET_BOOT_IN) racket-v.boot petite scheme

# ----------------------------------------
# Mac OS

RKTFWDIR = Racket.framework/Versions/$(FWVERSION)_CS
RKTFW = $(RKTFWDIR)/Racket
GRAPPSKEL = GRacketCS.app/Contents/Info.plist

# Depending on MACLIBRKT_LINK_MODE, use Framework or statically link the framework's code:
MACLIBRKT_LINK_fw = -F. -framework Racket $(LDFLAGS)
MACLIBRKT_LINK_static = $(BOOT_OBJS) $(LDFLAGS) $(LIBS)

racketcs@OSX@: raw_racketcs
	$(MAKE) link-fw-bootfiles-@MACLIBRKT_LINK_MODE@
	$(MAKE) adjust-framework-boot-compress
	$(MAKE) mac-embed-boot-@MACLIBRKT_LINK_MODE@ EMBED_SRC=raw_racketcs EMBED_DEST=racketcs
	@INSTALL_NAME_TOOL@ -change "Racket.framework/Versions/$(FWVERSION)_CS/Racket" "@executable_path/Racket.framework/Versions/$(FWVERSION)_CS/Racket" racketcs
	$(RESTORE_SIGNATURE) racketcs

raw_racketcs@OSX@: main.o $(RKTFW)
	$(CC) $(CFLAGS) -o raw_racketcs main.o $(MACLIBRKT_LINK_@MACLIBRKT_LINK_MODE@)

GRACKET_BIN = GRacketCS.app/Contents/MacOS/GRacketCS

gracketcs@OSX@:
	$(MAKE) $(GRACKET_BIN)

$(GRACKET_BIN): grmain.o $(RKTFW) $(GRAPPSKEL)
	$(CC) $(CFLAGS) -o $(GRACKET_BIN)_raw grmain.o $(MACLIBRKT_LINK_@MACLIBRKT_LINK_MODE@)
	$(MAKE) mac-embed-boot-@MACLIBRKT_LINK_MODE@ EMBED_SRC=$(GRACKET_BIN)_raw EMBED_DEST=$(GRACKET_BIN)
	@INSTALL_NAME_TOOL@ -change "Racket.framework/Versions/$(FWVERSION)_CS/Racket" "@executable_path/../../../Racket.framework/Versions/$(FWVERSION)_CS/Racket" $(GRACKET_BIN)
	rm $(GRACKET_BIN)_raw
	$(RESTORE_SIGNATURE) $(GRACKET_BIN)

$(GRAPPSKEL): $(srcdir)/../../mac/osx_appl.rkt  $(srcdir)/../../version/racket_version.h $(srcdir)/../../mac/icon/GRacket.icns
	$(BOOTSTRAP_RACKET) $(srcdir)/../../mac/osx_appl.rkt $(srcdir)/../.. "CS"

BOOT_FILES = $(PETITE_BOOT_IN) $(SCHEME_BOOT_IN) $(RACKET_BOOT_IN)
FW_BOOT_DEST = Racket.framework/Versions/$(FWVERSION)_CS/boot

$(RKTFW): $(BOOT_OBJ_DEPS) $(BOOT_FILES)
	mkdir -p  Racket.framework/Versions/$(FWVERSION)_CS
	@RKTLINKER@ -o $(RKTFW) -dynamiclib -all_load $(BOOT_OBJS) $(LDFLAGS) $(LIBS)
	rm -f Racket.framework/Racket
	ln -s Versions/$(FWVERSION)_CS/Racket Racket.framework/Racket
	mkdir -p Racket.framework/Versions/$(FWVERSION)_CS/boot
	$(SCHEME) --script $(srcdir)/to-vfasl.ss @BOOT_COMPRESS_COMP@ $(XPATCH@CROSS_MODE@) $(PETITE_BOOT_IN) $(FW_BOOT_DEST)/petite.boot
	$(SCHEME) --script $(srcdir)/to-vfasl.ss @BOOT_COMPRESS_COMP@ $(XPATCH@CROSS_MODE@) $(SCHEME_BOOT_IN) $(FW_BOOT_DEST)/scheme.boot petite
	$(SCHEME) --script $(srcdir)/to-vfasl.ss @BOOT_COMPRESS_COMP@ $(XPATCH@CROSS_MODE@) $(RACKET_BOOT_IN) $(FW_BOOT_DEST)/racket.boot petite scheme

adjust-framework-boot-compress:
	$(BOOTSTRAP_RACKET) $(srcdir)/adjust-compress.rkt @BOOT_COMPRESS_COMP@ $(FW_BOOT_DEST)/petite.boot $(FW_BOOT_DEST)/scheme.boot $(FW_BOOT_DEST)/racket.boot

mac-embed-boot-fw:
	rm -f $(EMBED_DEST)
	cp $(EMBED_SRC) $(EMBED_DEST)
	$(STRIP_SIGNATURE) $(EMBED_DEST)

FW_BOOT_DESTS = $(FW_BOOT_DEST)/petite.boot $(FW_BOOT_DEST)/scheme.boot $(FW_BOOT_DEST)/racket.boot

mac-embed-boot-static:
	rm -f $(EMBED_DEST)
	cp $(EMBED_SRC) $(EMBED_DEST)
	$(STRIP_SIGNATURE) $(EMBED_DEST)
	$(BOOTSTRAP_RACKET) $(srcdir)/embed-boot.rkt @BOOT_COMPRESS_COMP@ "" $(EMBED_DEST) $(FW_BOOT_DESTS)

link-fw-bootfiles-fw:
	$(NOOP)

link-fw-bootfiles-static:
	rm -f petite-v.boot
	rm -f scheme-v.boot
	rm -f racket-v.boot
	ln -s $(FW_BOOT_DEST)/petite.boot petite-v.boot
	ln -s $(FW_BOOT_DEST)/scheme.boot scheme-v.boot
	ln -s $(FW_BOOT_DEST)/racket.boot racket-v.boot

# ----------------------------------------
# MinGW

racketcs@MINGW@:
	$(MAKE) RacketCS.exe

gracketcs@MINGW@:
	$(MAKE) GRacketCS.exe

RKT_DLL = libracketcsxxxxxxx.dll
RAW_RKT_DLL = libracketcsxxx_RAW.dll
DLL_REWRITES = ++rewrite $(RAW_RKT_DLL) $(RKT_DLL)
EXE_DESTS = ++exe raw_racketcs.exe RacketCS.exe ++exe raw_gracketcs.exe GRacketCS.exe
V_BOOTS = petite-v.boot scheme-v.boot racket-v.boot

RacketCS.exe GRacketCS.exe $(RKT_DLL): $(RAW_RKT_DLL) raw_gracketcs.exe raw_racketcs.exe $(EMBED_DEPS) $(V_BOOTS)
	$(BOOTSTRAP_RACKET) $(srcdir)/embed-boot.rkt --target $(TARGET_MACH) $(DLL_REWRITES) @BOOT_COMPRESS_COMP@ $(EXE_DESTS) $(RAW_RKT_DLL) $(RKT_DLL) $(V_BOOTS)

raw_racketcs.exe: main.o MemoryModule.o rres.o
	$(CC) $(CFLAGS) -o raw_racketcs.exe main.o MemoryModule.o rres.o $(LDFLAGS)

raw_gracketcs.exe: grmain.o MemoryModule.o grres.o
	$(CC) $(CFLAGS) -mwindows -o raw_gracketcs.exe grmain.o MemoryModule.o grres.o $(LDFLAGS)

$(RAW_RKT_DLL): $(BOOT_OBJ_DEPS) libres.o
	$(CC) $(CFLAGS) --shared -o $(RAW_RKT_DLL) $(BOOT_OBJS) libres.o $(LDFLAGS) rktio/librktio.a -static-libgcc $(LIBS)

MemoryModule.o: $(srcdir)/../../start/MemoryModule.c
	$(CC) -c $(CFLAGS) -o MemoryModule.o $(srcdir)/../../start/MemoryModule.c

rres.o: $(srcdir)/../../worksp/racket/racket.rc $(srcdir)/../../worksp/racket/racket.ico  $(srcdir)/../../version/racket_version.h
	@WINDRES@ -i $(srcdir)/../../worksp/racket/racket.rc -o rres.o

grres.o: $(srcdir)/../../worksp/gracket/gracket.rc $(srcdir)/../../worksp/gracket/gracket.ico  $(srcdir)/../../version/racket_version.h
	@WINDRES@ -i $(srcdir)/../../worksp/gracket/gracket.rc -o grres.o

libres.o: $(srcdir)/../../worksp/cs/libracket.rc  $(srcdir)/../../version/racket_version.h
	@WINDRES@ -i $(srcdir)/../../worksp/cs/libracket.rc -o libres.o

starter@MINGW@:
	$(MAKE) MzStart.exe
	$(MAKE) MrStart.exe

MzStart.exe: $(srcdir)/../../start/start.c start_rc.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o MzStart.exe -DMZSTART $(srcdir)/../../start/start.c start_rc.o

MrStart.exe: $(srcdir)/../../start/start.c gstart_rc.o
	$(CC) -mwindows $(CFLAGS) $(LDFLAGS) -o MrStart.exe -DMRSTART $(srcdir)/../../start/start.c gstart_rc.o

start_rc.o: $(srcdir)/../../worksp/starters/start.rc
	@WINDRES@ -DMZSTART -i $(srcdir)/../../worksp/starters/start.rc -o start_rc.o

gstart_rc.o: $(srcdir)/../../worksp/starters/start.rc
	@WINDRES@ -DMRSTART -i $(srcdir)/../../worksp/starters/start.rc -o gstart_rc.o

install@MINGW@:
	$(MAKE) plain-install

plain-install@MINGW@:
	$(MAKE) plain-install-upcased CS_INSTALLED=`echo $(CS_INSTALLED) | awk '{print toupper($0)}'`
	$(MAKE) unix-install-boot-files

plain-install-upcased:
	$(ICP) libracketcsxxxxxxx.dll $(libdir)/libracketcsxxxxxxx.dll
	$(ICP) RacketCS.exe $(prefix)/Racket$(CS_INSTALLED).exe
	$(ICP) GRacketCS.exe $(libpltdir)/GRacket$(CS_INSTALLED).exe
	$(ICP) MzStart.exe $(libpltdir)/MzStart.exe
	$(ICP) MrStart.exe $(libpltdir)/MrStart.exe
	$(STRIP_DEBUG) $(prefix)/Racket$(CS_INSTALLED).exe
	$(STRIP_DEBUG) $(libpltdir)/GRacket$(CS_INSTALLED).exe
	$(STRIP_DEBUG) $(libpltdir)/MzStart.exe
	$(STRIP_DEBUG) $(libpltdir)/MrStart.exe
	$(MAKE) system-install
	$(MAKE) include-install
	$(MAKE) install-cross

# ----------------------------------------
# Cross-compiled install

install-cross:
	$(MAKE) compile-xpatch.$(TARGET_MACH)
	$(MAKE) library-xpatch.$(TARGET_MACH)

SCHEME_XPATCH = $(XPATCH_FILE)

CROSS_SERVE_DEPS = $(srcdir)/mk-cross-serve.ss $(srcdir)/cross-serve.ss \
                   $(srcdir)/../expander/env.ss $(srcdir)/../linklet/config.ss

compile-xpatch.$(TARGET_MACH): $(SCHEME_XPATCH) $(CROSS_SERVE_DEPS)
	$(SCHEME) --script $(srcdir)/mk-cross-serve.ss $(srcdir) cross-serve.ss $(srcdir)/../expander/env.ss
	cat cross-serve.so $(SCHEME_XPATCH) > compile-xpatch.$(TARGET_MACH)

RACKET_XPATCH = chezpart.$(MACH) rumble.$(MACH)	thread.$(MACH) \
                io.$(MACH) regexp.$(MACH) schemify.$(MACH) linklet.$(MACH) expander.$(MACH)

library-xpatch.$(TARGET_MACH): $(RACKET_XPATCH)
	cat $(RACKET_XPATCH) > library-xpatch.$(TARGET_MACH)

# ----------------------------------------
# Common

DEF_COLLECTS_DIR@NOT_MINGW@ = -DINITIAL_COLLECTS_DIRECTORY='"'"`cd $(srcdir)/../../../collects; pwd`"'"'
DEF_CONFIG_DIR@NOT_MINGW@ = -DINITIAL_CONFIG_DIRECTORY='"'"`cd $(srcdir)/../../..; pwd`/etc"'"'
DEF_COLLECTS_DIR@MINGW@ =
DEF_CONFIG_DIR@MINGW@ =
DEF_C_DIRS = $(DEF_COLLECTS_DIR) $(DEF_CONFIG_DIR)

BOOT_DEFS_plain =
BOOT_DEFS_pbchunk = -DPBCHUNK_REGISTER

MAIN_DEPS = $(srcdir)/main.c $(srcdir)/boot.h cs_config.h \
            $(srcdir)/../../start/config.inc \
            $(srcdir)/../../start/self_exe.inc

main.o: $(MAIN_DEPS)
	$(CC) $(CFLAGS) $(DEF_C_DIRS) -c -o main.o $(srcdir)/main.c

grmain.o: $(srcdir)/grmain.c $(MAIN_DEPS) $(srcdir)/../../start/gui_filter.inc
	$(CC) $(CFLAGS) $(DEF_C_DIRS) -c -o grmain.o $(srcdir)/grmain.c

boot.o: $(srcdir)/boot.c $(srcdir)/../../rktio/rktio.inc $(srcdir)/boot.h
	$(CC) $(CFLAGS) $(BOOT_DEFS_@PBCHUNK_MODE@) -c -o boot.o $(srcdir)/boot.c

starter@NOT_MINGW@: $(srcdir)/../../start/ustart.c $(srcdir)/../../start/self_exe.inc
	$(CC) $(CFLAGS) $(LDFLAGS) -o starter $(srcdir)/../../start/ustart.c


repack-install-libs:
	$(MAKE) libracketcs.a SCHEME_WORKAREA="$(ABS_SCHEME_WORKAREA)"

libracketcs.a: $(SCHEME_LIB_DEPS) rktio/librktio.a boot.o
	mkdir -p repack
	rm -f repack/*
	cd repack && @Z_LIB_UNPACK@
	cd repack && @LZ4_LIB_UNPACK@
	cd repack && $(AR) x ../rktio/librktio.a
	cd repack && $(AR) x $(SCHEME_TARGET_INC)/libkernel.a
	$(AR) $(ARFLAGS) libracketcs.a repack/*.o boot.o

repack-no-install-libs:
	$(NOOP)

# ----------------------------------------
# pbchunk mode

# The "to-pbchunk.ss" script generates revised boot files as well as
# petiteN.c, schemeN.c, and racketN.c, where those C files much be
# linked and "boot.c" needs to initialize them

PBCHUNK_IN = $(PETITE_BOOT_plain) $(SCHEME_BOOT_plain) $(RACKET_BOOT_plain)

# Using `%` in place of `.` in `PBCHUNK_OUT` makes it work as a target
# where a command produces multiple files at the same time
PBCHUNK_OUT = petite-pbchunk%boot scheme-pbchunk%boot racket-pbchunk%boot \
              petite0%c petite1%c petite2%c petite3%c petite4%c \
              petite5%c petite6%c petite7%c petite8%c petite9%c \
              scheme0%c scheme1%c scheme2%c scheme3%c scheme4%c \
              scheme5%c scheme6%c scheme7%c scheme8%c scheme9%c \
              racket0%c racket1%c racket2%c racket3%c racket4%c \
              racket5%c racket6%c racket7%c racket8%c racket9%c

$(PBCHUNK_OUT): $(PBCHUNK_IN)
	$(SCHEME) --script $(srcdir)/to-pbchunk.ss @BOOT_COMPRESS_COMP@ $(XPATCH@CROSS_MODE@) $(PBCHUNK_IN)

PBCHUNK_CFLAGS=$(CFLAGS) -DPORTABLE_BYTECODE -I$(SCHEME_WORKAREA)/$(TARGET_MACH)/boot/$(TARGET_MACH) -I$(SCHEME_WORKAREA)/$(TARGET_MACH)/c

petite0.o: petite0.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o petite0.o petite0.c

petite1.o: petite1.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o petite1.o petite1.c

petite2.o: petite2.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o petite2.o petite2.c

petite3.o: petite3.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o petite3.o petite3.c

petite4.o: petite4.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o petite4.o petite4.c

petite5.o: petite5.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o petite5.o petite5.c

petite6.o: petite6.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o petite6.o petite6.c

petite7.o: petite7.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o petite7.o petite7.c

petite8.o: petite8.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o petite8.o petite8.c

petite9.o: petite9.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o petite9.o petite9.c

scheme0.o: scheme0.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o scheme0.o scheme0.c

scheme1.o: scheme1.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o scheme1.o scheme1.c

scheme2.o: scheme2.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o scheme2.o scheme2.c

scheme3.o: scheme3.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o scheme3.o scheme3.c

scheme4.o: scheme4.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o scheme4.o scheme4.c

scheme5.o: scheme5.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o scheme5.o scheme5.c

scheme6.o: scheme6.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o scheme6.o scheme6.c

scheme7.o: scheme7.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o scheme7.o scheme7.c

scheme8.o: scheme8.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o scheme8.o scheme8.c

scheme9.o: scheme9.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o scheme9.o scheme9.c

racket0.o: racket0.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o racket0.o racket0.c

racket1.o: racket1.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o racket1.o racket1.c

racket2.o: racket2.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o racket2.o racket2.c

racket3.o: racket3.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o racket3.o racket3.c

racket4.o: racket4.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o racket4.o racket4.c

racket5.o: racket5.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o racket5.o racket5.c

racket6.o: racket6.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o racket6.o racket6.c

racket7.o: racket7.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o racket7.o racket7.c

racket8.o: racket8.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o racket8.o racket8.c

racket9.o: racket9.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o racket9.o racket9.c

# ----------------------------------------
# Install

# RUN_RACKET typically redirects to RUN_THIS_RACKET, but it can also
# redirect to a compatible existing Racket executable (e.g., for
# cross-compilation)
RUN_THIS_RACKET = $(DESTDIR)$(bindir)/racket$(CS_INSTALLED)

# Intended for configuration by an external makefile that drives this one:
SELF_ROOT_CONFIG_FLAG = -Z
SELF_ROOT_CONFIG = $(SELF_ROOT_CONFIG_FLAG) $(SELF_ROOT_CONFIG_DIR)

INST_CONFIG = -X "$(DESTDIR)$(collectsdir)" -G "$(DESTDIR)$(configdir)"
SETUP_RACKET_FLAGS = $(INST_CONFIG) $(SETUP_MACHINE_FLAGS) $(SELF_ROOT_CONFIG) @INSTALL_SETUP_RACKET_FLAGS@
SETUP_SETUP_FLAGS = @INSTALL_SETUP_FLAGS@ $(PLT_SETUP_OPTIONS) $(PLT_ISO)
SETUP_ARGS = $(SETUP_RACKET_FLAGS) -N "raco" -l- setup $(SETUP_SETUP_FLAGS)

# Needed for non-GNU makes:
PROPAGATE_VARIABLES = SELF_ROOT_CONFIG_FLAG="$(SELF_ROOT_CONFIG_FLAG)" \
                      PLT_SETUP_OPTIONS="$(PLT_SETUP_OPTIONS)" \
                      SETUP_MACHINE_FLAGS="$(SETUP_MACHINE_FLAGS)"

install@NOT_MINGW@:
	$(MAKE) plain-install
	$(MAKE) setup-install $(PROPAGATE_VARIABLES)

setup-install:
	$(MAKE) do-setup-install@T_CROSS_MODE@

do-setup-install:
	@RUN_RACKET@ $(SELF_ROOT_CONFIG) $(SETUP_ARGS)

do-setup-install-cross:
	@RUN_RACKET@ $(SELF_ROOT_CONFIG) -C -M -R `pwd`/compiled: --cross-compiler $(TARGET_MACH) `pwd` $(SETUP_ARGS)

no-setup-install:
	echo done

plain-install@NOT_OSX@@NOT_MINGW@:
	$(MAKE) unix-install@T_CROSS_MODE@

plain-install@OSX@:
	$(MAKE) macos-install@T_CROSS_MODE@

common-install:
	mkdir -p $(ALLDIRINFO)
	rm -f "$(DESTDIR)$(bindir)/racket$(CS_INSTALLED)"
	rm -f "$(DESTDIR)$(libpltdir)/starter"
	rm -f "$(DESTDIR)$(libpltdir)/starter-sh"
	$(ICP) racketcs "$(DESTDIR)$(bindir)/racket$(CS_INSTALLED)"
	$(STRIP_SIGNATURE) "$(DESTDIR)$(bindir)/racket$(CS_INSTALLED)"
	$(STRIP_DEBUG) "$(DESTDIR)$(bindir)/racket$(CS_INSTALLED)"
	$(RESTORE_SIGNATURE) "$(DESTDIR)$(bindir)/racket$(CS_INSTALLED)"
	$(ICP) $(srcdir)/../../start/starter-sh "$(DESTDIR)$(libpltdir)/starter-sh"
	$(ICP) starter "$(DESTDIR)$(libpltdir)/starter"
	$(STRIP_SIGNATURE) "$(DESTDIR)$(libpltdir)/starter"
	$(STRIP_DEBUG) "$(DESTDIR)$(libpltdir)/starter"
	$(BOOTSTRAP_RACKET) $(START_COLLECTS_PATH) "$(DESTDIR)$(libpltdir)/starter" $(DESTDIR)@COLLECTS_PATH@ $(DESTDIR)@CONFIG_PATH@
	$(RESTORE_SIGNATURE) "$(DESTDIR)$(libpltdir)/starter"
	$(MAKE) system-install
	$(MAKE) include-install
	$(MAKE) common-@INSTALL_LIBS_ENABLE@-libs

SYSTEM_RKTD = $(DESTDIR)$(libpltdir)/system$(CS_INSTALLED).rktd

system-install:
	$(RACKET) -cu "$(srcdir)/gen-system.rkt" $(SYSTEM_RKTD) $(TARGET_MACH) $(KERNEL_TARGET_MACH) @CROSS_COMPILE_TARGET_KIND@ "$(srcdir)" "@PLT_CS_SLSP_SUFFIX@"

include-install:
	$(ICP) $(srcdir)/api.h "$(DESTDIR)$(includepltdir)/racketcs.h"
	$(ICP) $(srcdir)/boot.h "$(DESTDIR)$(includepltdir)/racketcsboot.h"
	$(ICP) $(SCHEME_TARGET_INC)/scheme.h "$(DESTDIR)$(includepltdir)/chezscheme.h"

common-install-libs:
	$(ICP_LIB) libracketcs.a "$(DESTDIR)$(libdir)/libracketcs.a"
	$(STRIP_LIB_DEBUG) "$(DESTDIR)$(libdir)/libracketcs.a"

common-no-install-libs:
	$(NOOP)

unix-install:
	$(MAKE) common-install
	rm -f "$(DESTDIR)$(libpltdir)/gracket$(CS_INSTALLED)"
	$(ICP) gracketcs "$(DESTDIR)$(libpltdir)/gracket$(CS_INSTALLED)"
	$(STRIP_SIGNATURE) "$(DESTDIR)$(bindir)/racket$(CS_INSTALLED)"
	$(STRIP_SIGNATURE) "$(DESTDIR)$(libpltdir)/gracket$(CS_INSTALLED)"
	$(BOOTSTRAP_RACKET) $(START_COLLECTS_PATH) "$(DESTDIR)$(bindir)/racket$(CS_INSTALLED)" $(DESTDIR)@COLLECTS_PATH@ $(DESTDIR)@CONFIG_PATH@
	$(BOOTSTRAP_RACKET) $(START_COLLECTS_PATH) "$(DESTDIR)$(libpltdir)/gracket$(CS_INSTALLED)" $(DESTDIR)@COLLECTS_PATH@ $(DESTDIR)@CONFIG_PATH@
	$(RESTORE_SIGNATURE) "$(DESTDIR)$(bindir)/racket$(CS_INSTALLED)"
	$(RESTORE_SIGNATURE) "$(DESTDIR)$(libpltdir)/gracket$(CS_INSTALLED)"
	$(MAKE) unix-@INSTALL_LIBS_ENABLE@-libs

unix-install-cross:
	$(MAKE) unix-install
	$(MAKE) install-cross

unix-install-libs:
	$(MAKE) unix-install-boot-files

unix-install-boot-files:
	$(BOOTSTRAP_RACKET) $(srcdir)/add-terminator.rkt petite-v.boot "$(DESTDIR)$(libpltdir)/petite.boot"
	$(BOOTSTRAP_RACKET) $(srcdir)/add-terminator.rkt scheme-v.boot "$(DESTDIR)$(libpltdir)/scheme.boot"
	$(BOOTSTRAP_RACKET) $(srcdir)/add-terminator.rkt racket-v.boot "$(DESTDIR)$(libpltdir)/racket.boot"

unix-no-install-libs:
	$(NOOP)

RKTFWDEST = @FRAMEWORK_INSTALL_DIR@/Racket.framework
FRAMEWORK_REL_PREFIX = "@executable_path/../$(libpltdir_rel)/"
FRAMEWORK_ABS_PREFIX = "$(libpltdir)/"

macos-install:
	$(MAKE) common-install
	rm -f $(DESTDIR)$(RKTFWDEST)/Racket
	rm -rf $(DESTDIR)$(RKTFWDEST)/Versions/$(FWVERSION)_CS
	if [ @FRAMEWORK_REL_INSTALL@ = yes ] ; then $(RACKET) -cu "$(srcdir)/../../mac/clean-fw.rkt" $(DESTDIR)$(RKTFWDEST) ; fi
	mkdir -p $(DESTDIR)"$(RKTFWDEST)/Versions/$(FWVERSION)_CS"
	cp $(RKTFW) $(DESTDIR)$(RKTFWDEST)/Versions/$(FWVERSION)_CS/
	mkdir -p $(DESTDIR)"$(RKTFWDEST)/Versions/$(FWVERSION)_CS/boot"
	rm -f $(DESTDIR)$(RKTFWDEST)/Versions/$(FWVERSION)_CS/boot/petite.boot
	rm -f $(DESTDIR)$(RKTFWDEST)/Versions/$(FWVERSION)_CS/boot/scheme.boot
	rm -f $(DESTDIR)$(RKTFWDEST)/Versions/$(FWVERSION)_CS/boot/racket.boot
	cp $(RKTFWDIR)/boot/petite.boot $(DESTDIR)$(RKTFWDEST)/Versions/$(FWVERSION)_CS/boot/
	cp $(RKTFWDIR)/boot/scheme.boot $(DESTDIR)$(RKTFWDEST)/Versions/$(FWVERSION)_CS/boot/
	cp $(RKTFWDIR)/boot/racket.boot $(DESTDIR)$(RKTFWDEST)/Versions/$(FWVERSION)_CS/boot/
	$(STRIP_SIGNATURE) "$(DESTDIR)$(bindir)/racket$(CS_INSTALLED)"
	$(BOOTSTRAP_RACKET) $(START_COLLECTS_PATH) "$(DESTDIR)$(bindir)/racket$(CS_INSTALLED)" $(DESTDIR)@COLLECTS_PATH@ $(DESTDIR)@CONFIG_PATH@
	@INSTALL_NAME_TOOL@ -change "@executable_path/Racket.framework/Versions/$(FWVERSION)_CS/Racket" "@FRAMEWORK_PREFIX@Racket.framework/Versions/$(FWVERSION)_CS/Racket" $(DESTDIR)"$(bindir)/racket$(CS_INSTALLED)"
	$(RESTORE_SIGNATURE) "$(DESTDIR)$(bindir)/racket$(CS_INSTALLED)"
	$(MAKE) macos-install-gracket CS_GR_INSTALLED="`echo $(CS_INSTALLED) | tr a-z A-Z`"
	$(MAKE) macos-@INSTALL_LIBS_ENABLE@-libs

macos-install-cross:
	$(MAKE) macos-install
	$(MAKE) install-cross

GRACKET_INSTALLED = $(DESTDIR)"$(libpltdir)/GRacket$(CS_GR_INSTALLED).app/Contents/MacOS/GRacket$(CS_GR_INSTALLED)"

macos-install-gracket:
	rm -rf $(DESTDIR)"$(libpltdir)/GRacket$(CS_GR_INSTALLED).app"
	$(ICP) -r "GRacketCS.app" $(DESTDIR)"$(libpltdir)/GRacket$(CS_GR_INSTALLED).app"
	$(BOOTSTRAP_RACKET) "$(srcdir)/../../mac/rename-app.rkt" $(DESTDIR)"$(libpltdir)/GRacket$(CS_GR_INSTALLED).app" "GRacketCS" "GRacket$(CS_GR_INSTALLED)" no-up
	@INSTALL_NAME_TOOL@ -change "@executable_path/../../../../bc/Racket.framework/Versions/$(FWVERSION)_CS/Racket" "@FRAMEWORK_PREFIX@Racket.framework/Versions/$(FWVERSION)_CS/Racket" $(GRACKET_INSTALLED)
	$(STRIP_SIGNATURE) $(GRACKET_INSTALLED)
	$(BOOTSTRAP_RACKET) $(START_COLLECTS_PATH) $(GRACKET_INSTALLED) ../../../../collects ../../../../etc
	$(STRIP_DEBUG) $(GRACKET_INSTALLED)
	$(RESTORE_SIGNATURE) $(GRACKET_INSTALLED)
	rm -rf $(DESTDIR)"$(libpltdir)/Starter.app"
	$(ICP) -r Starter.app $(DESTDIR)"$(libpltdir)/."

macos-install-libs:
	$(BOOTSTRAP_RACKET) $(srcdir)/add-terminator.rkt $(RKTFWDIR)/boot/petite.boot "$(DESTDIR)$(libpltdir)/petite.boot"
	$(BOOTSTRAP_RACKET) $(srcdir)/add-terminator.rkt $(RKTFWDIR)/boot/scheme.boot "$(DESTDIR)$(libpltdir)/scheme.boot"
	$(BOOTSTRAP_RACKET) $(srcdir)/add-terminator.rkt $(RKTFWDIR)/boot/racket.boot "$(DESTDIR)$(libpltdir)/racket.boot"

macos-no-install-libs:
	$(NOOP)

# ----------------------------------------
# Check

maybe-check-racketcs:
	if [ "$(RACKET)" = "$(DEFAULT_RACKET)" ] ; \
         then $(MAKE) check-racketcs ; fi

check-racketcs:
	./racketcs $(SETUP_BOOT) ignored $(builddir)/ignored.d $(srcdir)/../known.rkt $(srcdir)/..

# ----------------------------------------
# Reconfigure

CONFIGURE_SRCS = $(srcdir)/configure $(srcdir)/Makefile.in \
                 $(srcdir)/../../rktio/Makefile.in $(srcdir)/../../rktio/configure

# Only fire the `Makefile` rule explicitly via `reconfigure`
NO_RECONFIG =
ON_RECONFIG = no

reconfigure:
	$(MAKE) Makefile NO_RECONFIG=no ON_RECONFIG=

Makefile$(ON_RECONFIG): $(CONFIGURE_SRCS)
	$(srcdir)/configure $(CONFIGURE_ARGS_qq) $(MORE_CONFIGURE_ARGS)

Makefile$(NO_RECONFIG):
	$(NOOP)
