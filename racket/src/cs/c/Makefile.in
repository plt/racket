# This makefile exists only to communicate configuration decisions
# to "build.zuo"

srcdir = @srcdir@

# If `RACKET` is set to something different than empty or `auto`, it
# must be a compatible Racket to the curent build in the sense that
# `require`s here to collection-based modules will work. The Racket
# built here will never be run, so it's suitable as a part of a
# cross-compile setup.
#
# If `BOOTFILE_RACKET` is set, then it needs only to be a Racket that
# is recent enough to run "../../ChezScheme/rktboot/main.rkt".
#
RACKET = @RACKET@
BOOTFILE_RACKET = @BOOTFILE_RACKET@

# If `SCHEME` is set, it must be compatible to the curren build.
# If `SCHEME_DIR` is set and `SCHEME` is not, then `SCHEME_DIR` refers
# to an existing build directory.
# If `RACKET` is "auto", then an auto-generated Scheme is used and
# both of these are ignored.
SCHEME = @SCHEME@
SCHEME_DIR = @SCHEME_DIR@

# The host machine type:
MACH = @MACH@

# The machine type to build, which is `MACH` unless cross building:
TARGET_MACH = @TARGET_MACH@
CROSS_MODE = @CROSS_MODE@
KERNEL_TARGET_MACH = @KERNEL_TARGET_MACH@

CC = @CC@
CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
LINK_DYNAMIC = @LINK_DYNAMIC@
AR = @AR@
ARFLAGS = @ARFLAGS@
RANLIB = @RANLIB@
WINDRES = @WINDRES@

BOOT_COMPRESS_COMP = @BOOT_COMPRESS_COMP@
MACLIBRKT_LINK_MODE = @MACLIBRKT_LINK_MODE@
DISABLE_WPO = @DISABLE_WPO@

SETUP_BOOT_MODE = @SETUP_BOOT_MODE@

STRIP_DEBUG = @STRIP_DEBUG@
STRIP_LIB_DEBUG = @STRIP_LIB_DEBUG@

RKTIO_CONFIGURE_ARGS = @RKTIO_CONFIGURE_ARGS@

COLLECTS_PATH = @COLLECTS_PATH@
CONFIG_PATH = @CONFIG_PATH@

CROSS_COMPILE_TARGET_KIND = @CROSS_COMPILE_TARGET_KIND@
PLT_CS_SLSP_SUFFIX = @PLT_CS_SLSP_SUFFIX@
INSTALL_LIBS_ENABLE = @INSTALL_LIBS_ENABLE@
FRAMEWORK_INSTALL_DIR = @FRAMEWORK_INSTALL_DIR@
FRAMEWORK_REL_INSTALL = @FRAMEWORK_REL_INSTALL@
CS_INSTALLED = @CS_INSTALLED@

ICP=@ICP@
ICP_LIB=@ICP_LIB@

SELF_ROOT_CONFIG_DIR =

INSTALL_SETUP_FLAGS = @INSTALL_SETUP_FLAGS@

OSX=@OSX@

POST_LINKER = @POST_LINKER@

Z_LIB=@Z_LIB@
LZ4_LIB=@LZ4_LIB@

DISABLE_ICONV=@DISABLE_ICONV@
DISABLE_CURSES=@DISABLE_CURSES@

# Communicate certain configuration choices to ".so" compiles via
# environment variables:
CONFIGURE_RACKET_SO_COMPILE = @CONFIGURE_RACKET_SO_COMPILE@

SCHEME_LIBFFI = @SCHEME_LIBFFI@
PBCHUNK_MODE = @PBCHUNK_MODE@

PACKAGE = racket
prefix = @prefix@
exec_prefix = @exec_prefix@
datarootdir = @datarootdir@
bindir = @bindir@
libdir = @libdir@
includepltdir = @includepltdir@
libpltdir = @libpltdir@
libpltdir_rel = @libpltdir_rel@
etcpltdir = @etcpltdir@
sharepltdir = @sharepltdir@
collectsdir = @collectsdir@
configdir = @etcpltdir@

# ----------------------------------------

default:
	@echo 'Use `zuo` instead'

# ----------------------------------------
# Unix

BOOT_EXTRA_OBJS_plain =
BOOT_EXTRA_OBJS_pbchunk = petite0.o petite1.o petite2.o petite3.o petite4.o \
                          petite5.o petite6.o petite7.o petite8.o petite9.o \
                          scheme0.o scheme1.o scheme2.o scheme3.o scheme4.o \
                          scheme5.o scheme6.o scheme7.o scheme8.o scheme9.o \
                          racket0.o racket1.o racket2.o racket3.o racket4.o \
                          racket5.o racket6.o racket7.o racket8.o racket9.o

# ----------------------------------------
# Cross-compiled install

install-cross:
	$(MAKE) compile-xpatch.$(TARGET_MACH)
	$(MAKE) library-xpatch.$(TARGET_MACH)

SCHEME_XPATCH = $(XPATCH_FILE)

CROSS_SERVE_DEPS = $(srcdir)/mk-cross-serve.ss $(srcdir)/cross-serve.ss \
                   $(srcdir)/../expander/env.ss $(srcdir)/../linklet/config.ss

compile-xpatch.$(TARGET_MACH): $(SCHEME_XPATCH) $(CROSS_SERVE_DEPS)
	$(SCHEME) --script $(srcdir)/mk-cross-serve.ss $(srcdir) cross-serve.ss $(srcdir)/../expander/env.ss
	cat cross-serve.so $(SCHEME_XPATCH) > compile-xpatch.$(TARGET_MACH)

RACKET_XPATCH = chezpart.$(MACH) rumble.$(MACH)	thread.$(MACH) \
                io.$(MACH) regexp.$(MACH) schemify.$(MACH) linklet.$(MACH) expander.$(MACH)

library-xpatch.$(TARGET_MACH): $(RACKET_XPATCH)
	cat $(RACKET_XPATCH) > library-xpatch.$(TARGET_MACH)

# ----------------------------------------
# pbchunk mode

# The "to-pbchunk.ss" script generates revised boot files as well as
# petiteN.c, schemeN.c, and racketN.c, where those C files much be
# linked and "boot.c" needs to initialize them

PBCHUNK_IN = $(PETITE_BOOT_plain) $(SCHEME_BOOT_plain) $(RACKET_BOOT_plain)

# Using `%` in place of `.` in `PBCHUNK_OUT` makes it work as a target
# where a command produces multiple files at the same time
PBCHUNK_OUT = petite-pbchunk%boot scheme-pbchunk%boot racket-pbchunk%boot \
              petite0%c petite1%c petite2%c petite3%c petite4%c \
              petite5%c petite6%c petite7%c petite8%c petite9%c \
              scheme0%c scheme1%c scheme2%c scheme3%c scheme4%c \
              scheme5%c scheme6%c scheme7%c scheme8%c scheme9%c \
              racket0%c racket1%c racket2%c racket3%c racket4%c \
              racket5%c racket6%c racket7%c racket8%c racket9%c

$(PBCHUNK_OUT): $(PBCHUNK_IN)
	$(SCHEME) --script $(srcdir)/to-pbchunk.ss @BOOT_COMPRESS_COMP@ $(XPATCH@CROSS_MODE@) $(PBCHUNK_IN)

PBCHUNK_CFLAGS=$(CFLAGS) -DPORTABLE_BYTECODE -I$(SCHEME_WORKAREA)/$(TARGET_MACH)/boot/$(TARGET_MACH) -I$(SCHEME_WORKAREA)/$(TARGET_MACH)/c

petite0.o: petite0.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o petite0.o petite0.c

petite1.o: petite1.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o petite1.o petite1.c

petite2.o: petite2.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o petite2.o petite2.c

petite3.o: petite3.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o petite3.o petite3.c

petite4.o: petite4.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o petite4.o petite4.c

petite5.o: petite5.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o petite5.o petite5.c

petite6.o: petite6.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o petite6.o petite6.c

petite7.o: petite7.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o petite7.o petite7.c

petite8.o: petite8.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o petite8.o petite8.c

petite9.o: petite9.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o petite9.o petite9.c

scheme0.o: scheme0.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o scheme0.o scheme0.c

scheme1.o: scheme1.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o scheme1.o scheme1.c

scheme2.o: scheme2.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o scheme2.o scheme2.c

scheme3.o: scheme3.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o scheme3.o scheme3.c

scheme4.o: scheme4.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o scheme4.o scheme4.c

scheme5.o: scheme5.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o scheme5.o scheme5.c

scheme6.o: scheme6.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o scheme6.o scheme6.c

scheme7.o: scheme7.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o scheme7.o scheme7.c

scheme8.o: scheme8.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o scheme8.o scheme8.c

scheme9.o: scheme9.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o scheme9.o scheme9.c

racket0.o: racket0.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o racket0.o racket0.c

racket1.o: racket1.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o racket1.o racket1.c

racket2.o: racket2.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o racket2.o racket2.c

racket3.o: racket3.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o racket3.o racket3.c

racket4.o: racket4.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o racket4.o racket4.c

racket5.o: racket5.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o racket5.o racket5.c

racket6.o: racket6.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o racket6.o racket6.c

racket7.o: racket7.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o racket7.o racket7.c

racket8.o: racket8.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o racket8.o racket8.c

racket9.o: racket9.c
	$(CC) $(PBCHUNK_CFLAGS) -c -o racket9.o racket9.c
