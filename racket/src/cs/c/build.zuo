#lang zuo
(require "../../lib.zuo"
         "version.zuo"
         (only-in "../../ChezScheme/build.zuo"
                  [targets-at scheme-targets-at])
         (only-in "../main.zuo"
                  [targets-at cs-targets-at]))

(provide-targets targets-at)

(define (targets-at at-dir [vars (hash)])
  (define config (config-file->hash (at-dir "Makefile") vars))
  (define (lookup k) (hash-ref config k #f))

  (define m (lookup 'TARGET_MACH))
  (define host-m (lookup 'MACH))

  (define mac? (glob-match? "*osx" m))
  (define mac-fw? (and mac?
                       (equal? (lookup 'MACLIBRKT_LINK_MODE) "fw")))
  (define windows? (glob-match? "*nt" m))

  (define CS "ChezScheme")

  (define pbchunk? #f)

  (define boot-compress-flags
    (if (equal? (lookup 'BOOT_COMPRESS_COMP) "--compress")
        '("--compress")
        '()))

  (define version (racket-version))

  (define petite.boot (at-dir CS m "boot" m "petite.boot"))
  (define scheme.boot (at-dir CS m "boot" m "scheme.boot"))
  (define racket.boot (at-dir "racket.boot"))
  (define boot-files (list petite.boot scheme.boot racket.boot))

  (define scheme.exe+args
    (cond
      [(equal? m host-m)
       (cons (at-dir CS m "bin" m (.exe "scheme"))
             (list "-B" petite.boot "-B" scheme.boot))]
      [(equal? "auto" (lookup 'RACKET))
       (define dir (at-dir "../../local/cs/c" CS host-m))
       (cons (build-path dir "bin" host-m (.exe "scheme"))
             (list "-B" (build-path dir "boot" host-m "petite.boot")
                   "-B" (build-path dir "boot" host-m "scheme.boot")))]
      [(not (equal? "" (or (lookup 'SCHEME) "")))
       (cons (lookup 'SCHEME)
             '())]
      [(not (equal? "" (or (lookup 'SCHEME_DIR) "")))
       (define dir (build-path (lookup 'SCHEME_DIR) host-m))
       (cons (build-path dir "bin" host-m (.exe "scheme"))
             (list "-B" (build-path dir "boot" host-m "petite.boot")
                   "-B" (build-path dir "boot" host-m "scheme.boot")))]
      [else (error "don't know how to run scheme")]))
                             
  (define scheme.exe (car scheme.exe+args))
  (define scheme-args (cdr scheme.exe+args))

  (define xpatch (at-dir CS (~a "xc-" m) "s" "xpatch"))

  (define cs-targets (cs-targets-at at-dir
                                    (let ([vars (hash-set* vars
                                                           'scheme scheme.exe
                                                           'scheme-args scheme-args
                                                           'schemify "f")])
                                      (if (equal? m host-m)
                                          vars
                                          (hash-set* vars
                                                     'xpatch xpatch
                                                     'cso (~a "." host-m))))
                                    ;; compilation dependencies:
                                    (list petite.boot
                                          scheme.boot)))

  (define rktio_config.h (at-dir "../../rktio/rktio_config.h"))
  (define rktio-targets (configured-targets-at (at-source "../../rktio/configure")
                                               (shell->strings (hash-ref config 'RKTIO_CONFIGURE_ARGS ""))
                                               '()
                                               (at-dir "../../rktio/Makefile")
                                               (list rktio_config.h)
                                               (at-source "../../rktio/build.zuo")
                                               vars))
  (define librktio.a (find-target "librktio.a" rktio-targets))

  (define main-deps
    (list (at-source "main.c")
          (at-source "boot.h")
          (at-dir "cs_config.h")
          (at-source "../../start/config.inc")
          (at-source "../../start/self_exe.inc")))

  (define main.o (at-dir "main.o"))
  (define grmain.o (at-dir "grmain.o"))

  (define boot.o (at-dir "boot.o"))
  (define boot-objs
    (append (list boot.o)
            (list (at-dir CS m "boot" m "libkernel.a"))
            (let ([zlib (or (lookup 'Z_LIB) "")])
              (if (equal? zlib "")
                  (list (at-dir CS m "zlib/libz.a"))
                  '()))
            (let ([lz4 (or (lookup 'LZ4_LIB) "")])
              (if (equal? lz4 "")
                  (list (at-dir CS m "lz4/lib/liblz4.a"))
                  '()))
            (list librktio.a)
            (if pbchunk?
                (error "fixme")
                '())))

  (define MemoryModule.o (at-dir "MemoryModule.o"))

  (define framework-dir (at-dir "Racket.framework/Versions" (~a version "_CS")))
  (define framework (build-path framework-dir "Racket"))
  (define fw-boot-dest-dir (build-path framework-dir "boot"))
  
  (define raw_racketcs (at-dir (if windows?
                                   "raw_racketcs.exe"
                                   "raw_racketcs")))
  (define raw_gracketcs (at-dir (if windows?
                                    "raw_gracketcs.exe"
                                    "raw_gracketcs")))

  (define racketcs (at-dir (if windows?
                               "RacketCS.exe"
                               "racketcs")))
  (define gracketcs (at-dir (if windows?
                                "GRacketCS.exe"
                                "gracketcs")))

  (define libracketcsxxxxxxx.dll (at-dir "libracketcsxxxxxxx.dll"))
  (define libracketcsxxx_RAW.dll (at-dir "libracketcsxxx_RAW.dll"))

  (define rres.o (at-dir "rres.o"))
  (define grres.o (at-dir "grres.o"))
  (define libres.o (at-dir "libres.o"))

  (define petite-v.boot (at-dir "petite-v.boot"))
  (define scheme-v.boot (at-dir "scheme-v.boot"))
  (define racket-v.boot (at-dir "racket-v.boot"))

  (mkdir-p (at-dir "compiled"))

  (define (target->path t) (if (target? t) (target-path t) t))

  (define (scheme . args)
    (define cmd (append scheme-args args))
    (fd-write (fd-open-output 'stdout)
              (~a (string-tree->shell (cons scheme.exe cmd))
                  "\n"))
    (process/wait scheme.exe cmd))

  (define (compile-main main.o main.c)
    (c-compile main.o
               main.c
               (let* ([config (config-include config
                                              (at-dir ".")
                                              (at-source "."))]
                      [config (config-merge config
                                            'CPPFLAGS
                                            (build-shell
                                             (string->shell
                                              (~a "-DINITIAL_COLLECTS_DIRECTORY="
                                                  (~s
                                                   (path->complete-path
                                                    (at-source "../../../collects")))))
                                             (string->shell
                                              (~a "-DINITIAL_CONFIG_DIRECTORY="
                                                  (~s
                                                   (path->complete-path
                                                    (at-source "../../../etc")))))))])
                 config)))

  (define (setup-boot [mode (lookup 'SETUP_BOOT_MODE)]
                      [compiled-subdir "compiled"])
    (list "-O" "info@compiler/cm"
          "-l-" "setup" mode (at-source "../../setup-go.rkt")
          (at-dir compiled-subdir)
          "ignored" (at-dir "ignored.d")))

  (define (bootstrap-racket . args)
    (racket (hash-set config 'racket (if (equal? m host-m)
                                         raw_racketcs
                                         (at-dir "../../local/cs/c/racketcs")))
            (setup-boot)
            args))

  (define (codesign?) (glob-match? "*arm64*osx" m))

  (define (strip-signature dest)
    (when (codesign?)
      (shell/wait (build-shell "codesign --remove-signature"
                               (string->shell dest)))))
  (define (restore-signature dest)
    (when (codesign?)
      (shell/wait (build-shell "codesign -s -"
                               (string->shell dest)))))

  (define (install_name_tool . args)
    (shell/wait (build-shell "install_name_tool" (map string->shell args))))
  
  (define (mac-embed-boot src dest)
    (rm* dest)
    (cp src dest)
    (strip-signature dest)
    (when mac-fw?
      (bootstrap-racket (at-source "embed-boot.rkt")
                        boot-compress-flags
                        ""
                        dest
                        (build-path fw-boot-dest-dir "petite.boot")
                        (build-path fw-boot-dest-dir "scheme.boot")
                        (build-path fw-boot-dest-dir "racket.boot"))))

  (define link-config (input-data-target 'link-config (list mac? mac-fw?)))

  (define xpatch-args
    (if (equal? m host-m)
        '()
        (list "--xpatch" xpatch)))

  (define the-targets
    (make-targets
     `([:target build-racketcs ()
                ,(lambda (token)
                   (unless (equal? m host-m)
                     (when (equal? "auto" (lookup 'RACKET))
                       (define host-targets-at
                         (configured-targets-at (at-source "../../cs/c/configure")
                                                '()
                                                '()
                                                (at-dir "../../local/cs/c/Makefile")
                                                '()
                                                (at-source "build.zuo")
                                                (hash)))
                       (build (find-target "build-racketcs" host-targets-at) token)))
                   (build/dep (find-target "bootfiles" the-targets) token)
                   (build/dep (find-target "scheme" the-targets) token)
                   (when (equal? m host-m)
                     (build/dep (find-target racket.boot the-targets) token))
                   (build/dep (find-target racketcs the-targets) token))]

       ,(if windows?
            `[:target (,racketcs ,gracketcs ,libracketcsxxxxxxx.dll)
                      (,raw_racketcs ,raw_gracketcs ,libracketcsxxx_RAW.dll ,(at-source "embed-boot.rkt")
                                     ,petite-v.boot ,scheme-v.boot ,racket-v.boot)
                      ,(lambda (path token)
                         (bootstrap-racket (at-source "embed-boot.rkt")
                                           "--target" m
                                           "++rewrite" "libracketcsxxx_RAW.dll" "libracketcsxxxxxxx.dll"
                                           boot-compress-flags
                                           "++exe" raw_racketcs racketcs
                                           "++exe" raw_gracketcs gracketcs
                                           libracketcsxxx_RAW.dll libracketcsxxxxxxx.dll
                                           petite-v.boot scheme-v.boot racket-v.boot))]
            `[:target ,racketcs (,raw_racketcs ,@(if mac?
                                                     (list framework)
                                                     '())
                                               ,link-config)
                      ,(lambda (path token)
                         (cond
                           [mac?
                            (when (not mac-fw?)
                              (rm* petite-v.boot)
                              (rm* scheme-v.boot)
                              (rm* racket-v.boot)
                              (symlink (build-path fw-boot-dest-dir "petite.boot") petite-v.boot)
                              (symlink (build-path fw-boot-dest-dir "scheme.boot") scheme-v.boot)
                              (symlink (build-path fw-boot-dest-dir "racket.boot") racket-v.boot))
                            (bootstrap-racket (at-source "adjust-compress.rkt")
                                              boot-compress-flags
                                              (build-path fw-boot-dest-dir "petite.boot")
                                              (build-path fw-boot-dest-dir "scheme.boot")
                                              (build-path fw-boot-dest-dir "racket.boot"))
                            (mac-embed-boot raw_racketcs racketcs)
                            (install_name_tool "-change"
                                               (build-path framework-dir "Racket")
                                               (~a "@executable_path/Racket.framework/Versions/" version "_CS/Racket")
                                               racketcs)
                            (restore-signature racketcs)]
                           [else
                            (error "fixme")]))])

       ,@(map
          (lambda (raw_exe gui? res.o)
            `[:target ,raw_exe (,main.o ,@(if mac-fw?
                                          (list framework)
                                          boot-objs)
                                    ,@(if windows?
                                          (list MemoryModule.o res.o)
                                          '())
                                    ,link-config)
                      ,(lambda (path token)
                         (c-link raw_exe
                                 (cons main.o
                                       (append
                                        (if mac-fw? (list framework) '())
                                        (if windows?
                                            (list MemoryModule.o res.o)
                                            (map target->path boot-objs))))
                                 (config-merge (if (and windows? gui?)
                                                   (config-merge config
                                                                 'CFLAGS
                                                                 "-mwindows")
                                                   config)
                                               'LDFLAGS
                                               (or (lookup 'LINK_DYNAMIC) "")))
                         (define post (lookup 'POST_LINKER))
                         (when post
                           (shell/wait (build-shell post raw_racketcs))))])
          (cons raw_racketcs (if mac? '() (list raw_gracketcs)))
          (cons #f (if mac? '() (list #t)))
          (cons rres.o (if mac? '() (list grres.o))))     

       [:target ,framework (,@boot-objs ,@boot-files)
                ,(lambda (path token)
                   (mkdir-p framework-dir)
                   (c-compile framework
                              (map target->path boot-objs)
                              (let* ([config (hash-set config 'CC (lookup 'RKTLINKER))]
                                     [config (config-merge config
                                                           'LDFLAGS
                                                           "-dynamiclib -all_load")])
                                config))
                   (rm* (at-dir "Racket.framework/Racket"))
                   (symlink (~a "Versions/" version "_CS/Racket") (at-dir "Racket.framework/Racket"))
                   (mkdir-p fw-boot-dest-dir)
                   (define (vfasl in.boot needs)
                     (scheme "--script" (at-source "to-vfasl.ss")
                             boot-compress-flags
                             xpatch-args
                             in.boot
                             (build-path fw-boot-dest-dir (file-name-from-path in.boot))
                             needs))
                   (vfasl petite.boot '())
                   (vfasl scheme.boot '("petite"))
                   (vfasl racket.boot '("petite" "scheme")))]

       [:target ,libracketcsxxx_RAW.dll (,@boot-objs ,libres.o)
                ,(lambda (path token)
                   (c-compile libracketcsxxx_RAW.dll
                              (append (map target->path boot-objs) (list libres.o (target->path librktio.a)))
                              (config-merge (config-merge config
                                                          'CFLAGS
                                                          "--shared")
                                            'LDFLAGS
                                            '"-static-libgcc")))]

       [:target ,main.o (,@main-deps)
                ,(lambda (main.o token)
                   (compile-main main.o (at-source "main.c")))]

       [:target ,grmain.o (,@main-deps ,(at-source "grmain.c") ,(at-source "../../start/gui_filter.inc"))
                ,(lambda (grmain.o token)
                   (compile-main grmain.o (at-source "grmain.c")))]

       [:target ,boot.o (,(at-source "boot.c")
                         ,(at-source "../../rktio/rktio.inc")
                         ,(at-source "boot.h")
                         ,rktio_config.h)
                ,(lambda (boot.o token)
                   (c-compile boot.o
                              (at-source "boot.c")
                              (let* ([config (if pbchunk?
                                                 (config-merge config 'CPPFLAGS "-DPBCHUNK_REGISTER")
                                                 config)]
                                     [config (config-include config
                                                             (at-dir CS m "boot" m)
                                                             (at-source "../../rktio")
                                                             (at-dir "../../rktio"))])
                                config)))]

       [:target ,MemoryModule.o (,(at-source "../../start/MemoryModule.c"))
                ,(lambda (path token)
                   (c-compile MemoryModule.o
                              (at-source "../../start/MemoryModule.c")
                              config))]

       [:target ,racket.boot (,(find-target "racket.so" cs-targets))
                ,(lambda (path token)
                   (scheme "--script" (at-source "convert-to-boot.ss")
                           boot-compress-flags
                           xpatch-args
                           (at-dir "racket.so")
                           (at-dir "racket.boot")
                           m))]

       [:target scheme (bootfiles)
                ,(lambda (token)
                   (mkdir-p (at-dir CS m))
                   (display-to-file "" (at-dir CS m "Mf-config") :truncate)
                   (define m-targets (scheme-targets-at (make-at-dir (at-dir CS m))
                                                        (hash-set* config
                                                                   'm m)))
                   (build (find-target (if (equal? m host-m) "build" "kernel") m-targets) token))]
       
       ,@(cond
           [(not (equal? (or (lookup 'BOOTFILE_RACKET) "") ""))
            ;; use `BOOTFILE_RACKET` to build boot files
            `([:target bootfiles ()
                       ,(lambda (token)
                          (define bootfile-racket (lookup 'BOOTFILE_RACKET))
                          (define racket.exe (if (relative-path? bootfile-racket)
                                                 (if (not (car (split-path bootfile-racket)))
                                                     (find-executable-path bootfile-racket)
                                                     (at-dir bootfile-racket))
                                                 bootfile-racket))
                          ;; "rktboot/main.rkt" performs it's own timestamp-based "make"
                          (process/wait racket.exe
                                        (setup-boot "--chain" "compiled/rktboot")
                                        (at-source "../../ChezScheme/rktboot/main.rkt")
                                        "--scheme-src" (at-source "../../ChezScheme")
                                        "--dest" (at-dir CS)
                                        "--machine" m))])]
           [(equal? (lookup 'RACKET) "auto")
            ;; assuming "auto" is built before we get here
            `([:target bootfiles ()
                       ,(lambda (token)
                          (mkdir-p (at-dir CS m))
                          (display-to-file "" (at-dir CS m "Mf-config") :truncate)
                          (define host-m-targets (scheme-targets-at (make-at-dir (at-dir CS m))
                                                                    (hash-set* config
                                                                               'm host-m)))
                          (build (command-target->target (find-target "bootquick" host-m-targets)
                                                         (list "--host-workarea"
                                                               (at-dir "../../local/cs/c/ChezScheme" host-m)
                                                               m))
                                 token))])]
           [(directory-exists? (at-source "../../ChezScheme/boot/pb"))
            ;; pb bootstrap mode: build pb to build machine-specific bootfiles
            `([:target bootfiles ()
                       ,(lambda (token)
                          (mkdir-p (at-dir CS "pb/c"))
                          (display-to-file "" (at-dir CS "pb/Mf-config") :truncate)
                          (define pb-targets (scheme-targets-at (make-at-dir (at-dir CS "pb"))
                                                                (hash-set* config
                                                                           'm "pb"
                                                                           'defaultm m)))
                          
                          (build (command-target->target (find-target "bootquick" pb-targets)
                                                         (list m))
                                 token))])])

       [:target ,petite-v.boot (,petite.boot)
                ,(lambda (path target)
                   (scheme "--script" (at-source "to-vfasl.ss") boot-compress-flags xpatch-args
                           petite.boot petite-v.boot))]
       [:target ,scheme-v.boot (,scheme.boot)
                ,(lambda (path target)
                   (scheme "--script" (at-source "to-vfasl.ss") boot-compress-flags xpatch-args
                           scheme.boot scheme-v.boot
                           "petite"))]
       [:target ,racket-v.boot (,racket.boot)
                ,(lambda (path target)
                   (scheme "--script" (at-source "to-vfasl.ss") boot-compress-flags xpatch-args
                           racket.boot racket-v.boot
                           "petite" "scheme"))]

       [:target ,rres.o (,(at-source "../../worksp/racket/racket.rc")
                         ,(at-source "../../worksp/racket/racket.ico")
                         ,(at-source "../../version/racket_version.h"))
                ,(lambda (path target)
                   (shell/wait (build-shell (lookup 'WINDRES)
                                            "-i" (at-source "../../worksp/racket/racket.rc")
                                            "-o" path)))]
       [:target ,grres.o (,(at-source "../../worksp/gracket/gracket.rc")
                          ,(at-source "../../worksp/gracket/gracket.ico")
                          ,(at-source "../../version/racket_version.h"))
                ,(lambda (path target)
                   (shell/wait (build-shell (lookup 'WINDRES)
                                            "-i" (at-source "../../worksp/gracket/gracket.rc")
                                            "-o" path)))]
       [:target ,libres.o (,(at-source "../../worksp/cs/libracket.rc")
                           ,(at-source "../../version/racket_version.h"))
                ,(lambda (path target)
                   (shell/wait (build-shell (lookup 'WINDRES)
                                            "-i" (at-source "../../worksp/cs/libracket.rc")
                                            "-o" path)))]

       [:target here ()
                ,(lambda (token)
                   (define s (~a "#lang zuo\n"
                                 (~a `(begin
                                        (require ,(~s (find-relative-path (at-dir ".")
                                                                          (at-source "build.zuo"))))
                                        (build/command-line* targets-at at-source))
                                     "\n")))
                   (display-to-file s (at-dir "main.zuo") :truncate))]

       [:db-dir ,(at-dir "compiled")])))

  the-targets)
