#lang zuo
(require "../../lib.zuo"
         (only-in "../../ChezScheme/workmain.zuo"
                  [targets-at scheme-targets-at])
         (only-in "../main.zuo"
                  [targets-at cs-targets-at]))

(provide-targets targets-at)

(define (targets-at at-dir [vars (hash)])
  (define config (config-file->hash (at-dir "Makefile") vars))
  (define (lookup k) (hash-ref config k #f))

  (define m (lookup 'MACH))

  (define CS "ChezScheme")

  (define petite.boot (at-dir CS m "boot" m "petite.boot"))
  (define scheme.boot (at-dir CS m "boot" m "scheme.boot"))
  (define racket.boot (at-dir "racket.boot"))

  (define scheme.exe (at-dir CS m "bin" m (.exe "scheme")))
  (define scheme-args (list "-B" petite.boot "-B" scheme.boot))

  (define cs-targets (cs-targets-at at-dir
                                    (hash-set* vars
                                               'scheme scheme.exe
                                               'scheme-args scheme-args
                                               'schemify "f")
                                    ;; compilation dependencies:
                                    (list petite.boot
                                          scheme.boot)))

  (mkdir-p (at-dir "compiled"))

  (define (scheme args)
    (define cmd (cons scheme.exe (append scheme-args args)))
    (fd-write (fd-open-output 'stdout)
              (~a (apply build-shell (map string->shell cmd))
                  "\n"))
    (define p (apply process cmd))
    (process-wait (hash-ref p 'process))
    (unless (= 0 (process-status (hash-ref p 'process)))
      (error "failed")))

  (define the-targets
    (make-targets
     `(
       [:target build ()
                ,(lambda (token)
                   (build (find-target "bootfiles" the-targets) token)
                   (build (find-target racket.boot the-targets) token))]
       
       [:target ,racket.boot (,(find-target "racket.so" cs-targets))
                ,(lambda (path token)
                   (scheme (append
                            (list "--script" (at-source "convert-to-boot.ss"))
                            (if (equal? (lookup 'BOOT_COMPRESS_COMP) "--compress")
                                '("--compress")
                                '())
                            ;; $(XPATCH@CROSS_MODE@)
                            (list
                             (at-dir "racket.so")
                             (at-dir "racket.boot")
                             m))))]

       [:target scheme (bootfiles)
                ,(lambda (token)
                   (mkdir-p (at-dir CS m))
                   (display-to-file "" (at-dir CS m "Mf-config") :truncate)
                   (define m-targets (scheme-targets-at (make-at-dir (at-dir CS m))
                                                        (hash-set* config
                                                                   'm m)))
                   (build (find-target "build" m-targets) token))]
       
       ,@(cond
           [(directory-exists? (at-source "../../ChezScheme/boot/pb"))
            ;; pb bootstrap mode: build pb to build machine-specific bootfiles
            `([:target bootfiles ()
                       ,(lambda (token)
                          (mkdir-p (at-dir CS "pb/c"))
                          (display-to-file "" (at-dir CS "pb/Mf-config") :truncate)
                          (define pb-targets (scheme-targets-at (make-at-dir (at-dir CS "pb"))
                                                                (hash-set* config
                                                                           'm "pb"
                                                                           'defaultm m)))
                          
                          (build (command-target->target (find-target "bootquick" pb-targets)
                                                         (list m))
                                 token))])])

       

       [:db-dir ,(at-dir "compiled")])))

  the-targets)
