#lang zuo
(require "../../lib.zuo"
         "version.zuo"
         (only-in "../../ChezScheme/build.zuo"
                  [targets-at scheme-targets-at])
         (only-in "../main.zuo"
                  [targets-at cs-targets-at]))

(provide-targets targets-at)

(define (targets-at at-dir [vars (hash)])
  (define config (config-file->hash (at-dir "Mf-config") vars))
  (define (lookup k) (hash-ref config k #f))

  (define host-m (lookup 'MACH))
  (define m (or (lookup 'TARGET_MACH) host-m))

  (define mac? (equal? (lookup 'OSX) "t"))
  (define mac-fw? (and mac?
                       (equal? (lookup 'MACLIBRKT_LINK_MODE) "fw")))
  (define windows? (glob-match? "*nt" m))
  (define msvc? (eq? 'windows (system-type)))

  (define CS "ChezScheme")

  (define pbchunk? (equal? (lookup 'PBCHUNK_MODE) "pbchunk"))

  (define boot-compress-flags
    (if (equal? (lookup 'BOOT_COMPRESS_COMP) "--compress")
        '("--compress")
        '()))

  (define version (racket-version))

  (define petite.boot (at-dir CS m "boot" m "petite.boot"))
  (define scheme.boot (at-dir CS m "boot" m "scheme.boot"))
  (define racket.boot (at-dir "racket.boot"))

  (define petite-chunked.boot (if pbchunk? (at-dir "petite-pbchunk.boot") petite.boot))
  (define scheme-chunked.boot (if pbchunk? (at-dir "scheme-pbchunk.boot") scheme.boot))
  (define racket-chunked.boot (if pbchunk? (at-dir "racket-pbchunk.boot") racket.boot))
  
  (define boot-files (list petite-chunked.boot scheme-chunked.boot racket-chunked.boot))

  (define cross? (not (equal? m host-m)))

  (define scheme.exe+args
    (cond
      [(not cross?)
       (cons (at-dir CS m "bin" m (.exe "scheme"))
             (list "-B" petite.boot "-B" scheme.boot))]
      [(equal? "auto" (lookup 'RACKET))
       (define dir (at-dir "local/cs/c" CS host-m))
       (cons (build-path dir "bin" host-m (.exe "scheme"))
             (list "-B" (build-path dir "boot" host-m "petite.boot")
                   "-B" (build-path dir "boot" host-m "scheme.boot")))]
      [(not (equal? "" (or (lookup 'SCHEME) "")))
       (cons (lookup 'SCHEME)
             '())]
      [(not (equal? "" (or (lookup 'SCHEME_DIR) "")))
       (define dir (build-path (lookup 'SCHEME_DIR) host-m))
       (cons (build-path dir "bin" host-m (.exe "scheme"))
             (list "-B" (build-path dir "boot" host-m "petite.boot")
                   "-B" (build-path dir "boot" host-m "scheme.boot")))]
      [else (error "don't know how to run scheme")]))
                             
  (define scheme.exe (car scheme.exe+args))
  (define scheme-args (cdr scheme.exe+args))

  (define xpatch (at-dir CS (~a "xc-" m) "s" "xpatch"))

  (define cs-targets (cs-targets-at at-dir
                                    (let ([vars (hash-set* vars
                                                           'scheme scheme.exe
                                                           'scheme-args scheme-args
                                                           'schemify "f"
                                                           'zlibLib (or (lookup 'Z_LIB) "")
                                                           'LZ4Lib (or (lookup 'LZ4_LIB) "")
                                                           'CONFIGURE_RACKET_SO_COMPILE (or (lookup 'CONFIGURE_RACKET_SO_COMPILE) "")
                                                           'DISABLE_WPO (or (lookup 'DISABLE_WPO) "f"))])
                                      (if (not cross?)
                                          vars
                                          (hash-set* vars
                                                     'xpatch xpatch
                                                     'cso (~a "." host-m))))
                                    ;; compilation dependencies:
                                    (list petite.boot
                                          scheme.boot)))

  (define rktio-dir (at-dir "rktio"))

  (define rktio_config.h (build-path rktio-dir "rktio_config.h"))
  (define rktio-targets
    (cond
      [(eq? 'windows (system-type))
       (mkdir-p rktio-dir)
       ((dynamic-require (at-source "../../rktio/build.zuo")
                         'targets-at)
        (make-at-dir rktio-dir))]
      [else
       (configured-targets-at (at-source "../../rktio/configure")
                              (shell->strings (hash-ref config 'RKTIO_CONFIGURE_ARGS ""))
                              '()
                              (build-path rktio-dir "Makefile")
                              (list rktio_config.h)
                              (at-source "../../rktio/build.zuo")
                              vars)]))
  (define librktio.a (find-target (~a "librktio." (if msvc? "lib" "a")) rktio-targets))

  (define main-deps
    (list (at-source "main.c")
          (at-source "boot.h")
          (at-dir "cs_config.h")
          (at-source "../../start/config.inc")
          (at-source "../../start/self_exe.inc")))

  (define main.o (at-dir (.c->.o "main.c")))
  (define grmain.o (at-dir (.c->.o "grmain.c")))

  (define pbchunk-srcs
    (if pbchunk?
        (let loop ([i 0])
          (if (= i 10)
              '()
              (list* (at-dir (~a "petite" i ".c"))
                     (at-dir (~a "scheme" i ".c"))
                     (at-dir (~a "racket" i ".c"))
                     (loop (+ i 1)))))
        '()))

  (define boot.o (at-dir (.c->.o "boot.c")))
  (define boot-objs
    (append (list boot.o)
            (list (at-dir CS m "boot" m (.a "kernel")))
            (let ([zlib (or (lookup 'Z_LIB) "")])
              (if (equal? zlib "")
                  (list (if msvc?
                            (at-dir CS m "zlibmts/zlib.lib")
                            (at-dir CS m "zlib/libz.a")))
                  '()))
            (let ([lz4 (or (lookup 'LZ4_LIB) "")])
              (if (equal? lz4 "")
                  (list (if msvc?
                            (at-dir CS m "lz4mts/lib/liblz4.lib")
                            (at-dir CS m "lz4/lib/liblz4.a")))
                  '()))
            (list librktio.a)
            (map .c->.o pbchunk-srcs)))

  (define MemoryModule.o (at-dir (.c->.o "MemoryModule.c")))

  (define framework-dir (at-dir "Racket.framework/Versions" (~a version "_CS")))
  (define framework (build-path framework-dir "Racket"))
  (define fw-boot-dest-dir (build-path framework-dir "boot"))
  
  (define raw_racketcs (at-dir (if windows?
                                   "raw_racketcs.exe"
                                   "raw_racketcs")))
  (define raw_gracketcs (at-dir (if windows?
                                    "raw_gracketcs.exe"
                                    "raw_gracketcs")))

  (define racketcs (at-dir (if windows?
                               "RacketCS.exe"
                               "racketcs")))
  (define gracketcs (at-dir (cond
                              [mac? "GRacketCS.app/Contents/MacOS/GRacketCS"]
                              [windows? "GRacketCS.exe"]
                              [else "gracketcs"])))

  (define libracketcsxxxxxxx.dll (at-dir "libracketcsxxxxxxx.dll"))
  (define libracketcsxxx_RAW.dll (at-dir "libracketcsxxx_RAW.dll"))

  (define rres.o (at-dir (~a "rres" (if msvc? ".res" ".o"))))
  (define grres.o (at-dir (~a "grres" (if msvc? ".res" ".o"))))
  (define libres.o (at-dir (~a "libres" (if msvc? ".res" ".o"))))
  (define start_rc.o (at-dir (~a "start_rc" (if msvc? ".res" ".o"))))
  (define gstart_rc.o (at-dir (~a "gstart_rc" (if msvc? ".res" ".o"))))

  (define gracket-app-skeleton (at-dir "GRacketCS.app/Contents/Info.plist"))

  (define petite-v.boot (at-dir "petite-v.boot"))
  (define scheme-v.boot (at-dir "scheme-v.boot"))
  (define racket-v.boot (at-dir "racket-v.boot"))

  (define starter (if windows? "starter" (at-dir "starter")))
  (define MzStart.exe (at-dir "MzStart.exe"))
  (define MrStart.exe (at-dir "MrStart.exe"))

  (define check-bootstrap-same-stamp (at-dir "check-bootstrap-same-stamp"))

  (define embed+boot-deps (list petite-v.boot scheme-v.boot racket-v.boot
                                (at-source "embed-boot.rkt")))
  
  (define windows-libs '("WS2_32.lib" "Shell32.lib" "User32.lib" "Winmm.lib"
                                      "RpCrt4.lib" "Ole32.lib" "Advapi32.lib"))

  (mkdir-p (at-dir "compiled"))

  (define (target->path t) (if (target? t) (target-path t) t))

  (define (scheme/options options args)
    (define cmd (append scheme-args args))
    (fd-write (fd-open-output 'stdout)
              (~a (string-tree->shell (cons scheme.exe cmd))
                  "\n"))
    (process/wait scheme.exe cmd options))

  (define (scheme . args)
    (scheme/options (hash) args))

  (define (compile-main main.o main.c)
    (c-compile main.o
               main.c
               (let* ([config (config-include config
                                              (at-dir ".")
                                              (at-source "."))]
                      [config (config-merge config
                                            'CPPFLAGS
                                            (build-shell
                                             (string->shell
                                              (~a "-DINITIAL_COLLECTS_DIRECTORY="
                                                  (~s
                                                   (path->complete-path
                                                    (at-source "../../../collects")))))
                                             (string->shell
                                              (~a "-DINITIAL_CONFIG_DIRECTORY="
                                                  (~s
                                                   (path->complete-path
                                                    (at-source "../../../etc")))))))])
                 config)))

  (define (setup-boot [mode (or (lookup 'SETUP_BOOT_MODE) "--boot")]
                      [compiled-subdir "compiled"])
    (list "-O" "info@compiler/cm"
          "-l-" "setup" mode (at-source "../../setup-go.rkt")
          (at-dir compiled-subdir)
          "ignored" (at-dir "ignored.d")))

  (define (config-bootstrap-racket)
    (hash-set config 'racket (if (not cross?)
                                 raw_racketcs
                                 (at-dir "local/cs/c/racketcs"))))
  
  (define (bootstrap-racket . args)
    (racket (config-bootstrap-racket)
            (setup-boot)
            args))
  (define (install-racket . args)
    ;; We could try to use the built or installed Racket, but the bootstrap
    ;; Racket should still work at this point, too
    (apply bootstrap-racket args))

  (define (codesign?) (glob-match? "*arm64*osx" (or (lookup 'KERNEL_TARGET_MACH) m)))

  (define (strip-signature dest)
    (when (codesign?)
      (if cross?
          (bootstrap-racket (at-source "../../mac/codesign.rkt") "--remove-signature"
                            dest)
          (shell/wait (build-shell "codesign --remove-signature"
                                   (string->shell dest))))))
  (define (restore-signature dest)
    (when (codesign?)
      (if cross?
          (bootstrap-racket (at-source "../../mac/codesign.rkt")
                            "-s" "-"
                            "--entitlements" (at-source "../../mac/entitlements.plist")
                            dest)
          (shell/wait (build-shell "codesign -s -"
                                   "--entitlements" (at-source "../../mac/entitlements.plist")
                                   (string->shell dest))))))

  (define (install_name_tool . args)
    (if cross?
        (bootstrap-racket (at-source "../../mac/install_name_tool.rkt")
                          args)
        (shell/wait (build-shell "install_name_tool" (map string->shell args)))))
  
  (define (post-linker exe)
    (let ([cmd (or (lookup 'POST_LINKER) "")])
      (unless (equal? cmd "")
        (shell/wait (build-shell cmd (string->shell exe))))))

  (define (windres in out [flags ""])
    (if msvc?
        (shell/wait (build-shell "rc" "-r" flags
                                 "/fo" (string->shell out)
                                 (string->shell in)))
        (shell/wait (build-shell (lookup 'WINDRES) flags
                                 "-i" (string->shell in)
                                 "-o" (string->shell out)))))
  
  (define (mac-embed-boot src dest)
    (rm* dest)
    (cp src dest)
    (strip-signature dest)
    (when mac-fw?
      (bootstrap-racket (at-source "embed-boot.rkt")
                        boot-compress-flags
                        ""
                        dest
                        (build-path fw-boot-dest-dir "petite.boot")
                        (build-path fw-boot-dest-dir "scheme.boot")
                        (build-path fw-boot-dest-dir "racket.boot"))))

  (define (set-collects-path dest collects-path config-path)
    (bootstrap-racket (at-source "../../start/collects-path.rkt") (at-source "../..")
                      dest collects-path config-path))

  (define link-config (input-data-target 'link-config (list mac? mac-fw?)))

  (define xpatch-args
    (if cross?
        (list "--xpatch" xpatch)
        '()))

  (define the-targets
    (make-targets
     `([:target build ()
                ,(lambda (token)
                   (build/dep (find-target "build-racketcs" the-targets) token)
                   (build/dep (find-target gracketcs the-targets) token)
                   (build/dep (find-target starter the-targets) token))]

       [:target build-racketcs ()
                ,(lambda (token)
                   (when cross?
                     (when (equal? "auto" (lookup 'RACKET))
                       (define host-targets-at
                         (configured-targets-at (at-source "../../cs/c/configure")
                                                '()
                                                '()
                                                (at-dir "local/cs/c/Mf-config")
                                                '()
                                                (at-source "build.zuo")
                                                (hash)))
                       (build (find-target "build-racketcs" host-targets-at) token)))
                   (build/dep (find-target "bootfiles" the-targets) token)
                   (build/dep (find-target "scheme" the-targets) token)
                   (unless cross?
                     (build/dep (find-target racket.boot the-targets) token))
                   (build/dep (find-target racketcs the-targets) token))]

       ,(if windows?
            `[:target (,racketcs ,gracketcs ,libracketcsxxxxxxx.dll)
                      (,raw_racketcs ,raw_gracketcs ,libracketcsxxx_RAW.dll ,@embed+boot-deps)
                      ,(lambda (path token)
                         (unless cross?
                           ;; we need a libracketcsxxxxxxx.dll in place to run raw_racketcs
                           (mkdir-p (at-dir "lib"))
                           (cp libracketcsxxx_RAW.dll (at-dir "lib" (file-name-from-path libracketcsxxxxxxx.dll)))
                           (for-each (lambda (v.boot)
                                       (cp v.boot (at-dir "lib" (file-name-from-path v.boot))))
                                     (list petite-v.boot scheme-v.boot racket-v.boot)))
                         (bootstrap-racket (at-source "embed-boot.rkt")
                                           "--target" m
                                           "++rewrite" "libracketcsxxx_RAW.dll" "libracketcsxxxxxxx.dll"
                                           boot-compress-flags
                                           "++exe" raw_racketcs racketcs
                                           "++exe" raw_gracketcs gracketcs
                                           libracketcsxxx_RAW.dll libracketcsxxxxxxx.dll
                                           petite-v.boot scheme-v.boot racket-v.boot))]
            `[:target ,racketcs (,raw_racketcs ,@(if mac?
                                                     (list framework)
                                                     embed+boot-deps)
                                               ,link-config)
                      ,(lambda (path token)
                         (cond
                           [mac?
                            (when (not mac-fw?)
                              (rm* petite-v.boot)
                              (rm* scheme-v.boot)
                              (rm* racket-v.boot)
                              (symlink (build-path fw-boot-dest-dir "petite.boot") petite-v.boot)
                              (symlink (build-path fw-boot-dest-dir "scheme.boot") scheme-v.boot)
                              (symlink (build-path fw-boot-dest-dir "racket.boot") racket-v.boot))
                            (bootstrap-racket (at-source "adjust-compress.rkt")
                                              boot-compress-flags
                                              (build-path fw-boot-dest-dir "petite.boot")
                                              (build-path fw-boot-dest-dir "scheme.boot")
                                              (build-path fw-boot-dest-dir "racket.boot"))
                            (mac-embed-boot raw_racketcs racketcs)
                            (install_name_tool "-change"
                                               (build-path framework-dir "Racket")
                                               (~a "@executable_path/Racket.framework/Versions/" version "_CS/Racket")
                                               racketcs)
                            (restore-signature racketcs)]
                           [else
                            (bootstrap-racket (at-source "embed-boot.rkt")
                                              "--target" m
                                              boot-compress-flags
                                              raw_racketcs racketcs petite-v.boot scheme-v.boot racket-v.boot)
                            (post-linker racketcs)
                            (restore-signature racketcs)])

                         (unless cross?
                           ;; Take this opportunity to perform a sanity check on
                           ;; known-value information:
                           (process/wait racketcs
                                         (setup-boot)
                                         (at-source "../known.rkt")
                                         (at-source ".."))))])

       ,@(map
          (lambda (raw_exe gui? main.o res.o)
            `[:target ,raw_exe (,main.o ,@(if mac-fw?
                                              (list framework)
                                              boot-objs)
                                        ,@(if windows?
                                              (list MemoryModule.o res.o)
                                              '())
                                        ,link-config)
                      ,(lambda (path token)
                         (c-link raw_exe
                                 (cons main.o
                                       (append
                                        (if mac-fw? (list framework) '())
                                        (cond
                                          [windows? `(,MemoryModule.o ,res.o ,@(if msvc? windows-libs '()))]
                                          [mac-fw? '()]
                                          [else (map target->path boot-objs)])))
                                 (config-merge (if (and windows? gui?)
                                                   (config-merge config
                                                                 'LDFLAGS
                                                                 (if msvc?
                                                                     "/link /SUBSYSTEM:windows"
                                                                     "-mwindows"))
                                                   config)
                                               'LDFLAGS
                                               (or (lookup 'LINK_DYNAMIC) "")))
                         (define post (or (lookup 'POST_LINKER) ""))
                         (unless (equal? post "")
                           (shell/wait (build-shell post raw_racketcs))))])
          (cons raw_racketcs (if mac? '() (list raw_gracketcs)))
          (cons #f (if mac? '() (list #t)))
          (cons main.o (if mac? '() (list grmain.o)))
          (cons rres.o (if mac? '() (list grres.o))))

       ,@(cond
           [mac?
            `([:target ,gracketcs (,grmain.o ,@(if mac-fw?
                                                   (list framework)
                                                   boot-objs)
                                             ,gracket-app-skeleton)
                       ,(lambda (path token)
                          (c-link (~a gracketcs "_raw")
                                  (cons grmain.o
                                        (if mac-fw?
                                            (list framework)
                                            (map target->path boot-objs)))
                                  config)
                          (mac-embed-boot (~a gracketcs "_raw") gracketcs)
                          (install_name_tool "-change"
                                             (build-path framework-dir "Racket")
                                             (~a "@executable_path/../../../Racket.framework/Versions/" version "_CS/Racket")
                                             gracketcs)
                          (rm (~a gracketcs "_raw"))
                          (restore-signature gracketcs))]
              [:target ,gracket-app-skeleton (,(at-source "../../mac/osx_appl.rkt")
                                              ,(at-source "../../version/racket_version.h")
                                              ,(at-source "../../mac/icon/GRacket.icns"))
                       ,(lambda (path token)
                          (bootstrap-racket (at-source "../../mac/osx_appl.rkt")
                                            (at-source "../..")
                                            "CS"))])]
           [windows? '()]
           [else
            `([:target ,gracketcs (,raw_gracketcs ,@embed+boot-deps ,link-config)
                       ,(lambda (path token)
                          (bootstrap-racket (at-source "embed-boot.rkt")
                                            "--target" m
                                            boot-compress-flags
                                            raw_gracketcs gracketcs petite-v.boot scheme-v.boot racket-v.boot)
                          (post-linker gracketcs)
                          (restore-signature gracketcs))])])

       [:target ,framework (,@boot-objs ,@boot-files)
                ,(lambda (path token)
                   (mkdir-p framework-dir)
                   (c-compile framework
                              (map target->path boot-objs)
                              (let* ([config (hash-set config 'CC (lookup 'RKTLINKER))]
                                     [config (config-merge config
                                                           'LDFLAGS
                                                           "-dynamiclib -all_load")])
                                config))
                   (rm* (at-dir "Racket.framework/Racket"))
                   (symlink (~a "Versions/" version "_CS/Racket") (at-dir "Racket.framework/Racket"))
                   (mkdir-p fw-boot-dest-dir)
                   (define (vfasl in.boot out.boot needs)
                     (scheme "--script" (at-source "to-vfasl.ss")
                             boot-compress-flags
                             xpatch-args
                             in.boot
                             (build-path fw-boot-dest-dir (file-name-from-path out.boot))
                             needs))
                   (vfasl petite-chunked.boot "petite.boot" '())
                   (vfasl scheme-chunked.boot "scheme.boot" '("petite"))
                   (vfasl racket-chunked.boot "racket.boot" '("petite" "scheme")))]

       [:target ,libracketcsxxx_RAW.dll (,@boot-objs ,libres.o)
                ,(lambda (path token)
                   (c-compile libracketcsxxx_RAW.dll
                              (append (map target->path boot-objs)
                                      (list libres.o (target->path librktio.a))
                                      (if msvc?
                                          windows-libs
                                          '()))
                              (if msvc?
                                  (config-merge config
                                                'CFLAGS
                                                "/LD")
                                  (config-merge (config-merge config
                                                              'CFLAGS
                                                              "--shared")
                                                'LDFLAGS
                                                '"-static-libgcc"))))]

       [:target ,main.o (,@main-deps)
                ,(lambda (main.o token)
                   (compile-main main.o (at-source "main.c")))]

       [:target ,grmain.o (,@main-deps ,(at-source "grmain.c") ,(at-source "../../start/gui_filter.inc"))
                ,(lambda (grmain.o token)
                   (compile-main grmain.o (at-source "grmain.c")))]

       [:target ,boot.o (,(at-source "boot.c")
                         ,(at-source "../../rktio/rktio.inc")
                         ,(at-source "boot.h")
                         ,(if msvc?
                              (find-target "rktio_config.h" rktio-targets)
                              rktio_config.h))
                ,(lambda (boot.o token)
                   (c-compile boot.o
                              (at-source "boot.c")
                              (let* ([config (if pbchunk?
                                                 (config-merge config 'CPPFLAGS "-DPBCHUNK_REGISTER")
                                                 config)]
                                     [config (config-include config
                                                             (at-dir CS m "boot" m)
                                                             (at-source "../../rktio")
                                                             rktio-dir)])
                                config)))]

       [:target ,MemoryModule.o (,(at-source "../../start/MemoryModule.c"))
                ,(lambda (path token)
                   (c-compile MemoryModule.o
                              (at-source "../../start/MemoryModule.c")
                              config))]

       [:target ,racket.boot (,(find-target "racket.so" cs-targets))
                ,(lambda (path token)
                   (scheme "--script" (at-source "convert-to-boot.ss")
                           boot-compress-flags
                           xpatch-args
                           (at-dir "racket.so")
                           (at-dir "racket.boot")
                           m))]

       ,@(cond
           [windows?
            `([:target starter (,MzStart.exe ,MrStart.exe) ,void]
              ,@(map (lambda (.exe .rc gui?)
                       `[:target ,.exe (,(at-source "../../start/start.c") ,.rc)
                                 ,(lambda (path token)
                                    (c-compile .exe
                                               (append (list (at-source "../../start/start.c")
                                                             .rc)
                                                       (if msvc?
                                                           (list "User32.lib")
                                                           '()))
                                               (config-merge (if gui?
                                                                 (config-merge config
                                                                               'LDFLAGS
                                                                               (if msvc?
                                                                                   "/link /SUBSYSTEM:windows"
                                                                                   "-mwindows"))
                                                                 config)
                                                             'CFLAGS
                                                             (if gui?
                                                                 "-DMRSTART"
                                                                 "-DMZSTART"))))])
                     (list MzStart.exe MrStart.exe)
                     (list start_rc.o gstart_rc.o)
                     (list #f #t))
              ,@(map (lambda (.rc gui?)
                       `[:target ,.rc (,(at-source "../../worksp/starters/start.rc"))
                                 ,(lambda (path token)
                                    (windres (at-source "../../worksp/starters/start.rc")
                                             .rc
                                             (if gui?
                                                 "-DMRSTART"
                                                 "-DMZSTART")))])
                    
                     (list start_rc.o gstart_rc.o)
                     (list #f #t)))]
           [else
            `([:target ,starter (,(at-source "../../start/ustart.c") ,(at-source "../../start/self_exe.inc"))
                       ,(lambda (path token)
                          (c-compile path
                                     (list (at-source "../../start/ustart.c"))
                                     config))])])

       [:target scheme (bootfiles)
                ,(lambda (token)
                   (mkdir-p (at-dir CS m))
                   (display-to-file "" (at-dir CS m "Mf-config") :truncate)
                   (define zlibEnv (if cross?
                                       ;; Makes cross compilation work more reliably for zlib, because
                                       ;; it causes zlib/configure to use given AR, etc.
                                       "CHOST=hack-do-not-use"
                                       ""))
                   (define m-targets (scheme-targets-at (make-at-dir (at-dir CS m))
                                                        (hash-set* config
                                                                   'm m
                                                                   'zlibConfigureEnv zlibEnv
                                                                   'enablelibffi (or (lookup 'SCHEME_LIBFFI) "no")
                                                                   'disablecurses (or (lookup 'DISABLE_CURSES) "no")
                                                                   'disableiconv (or (lookup 'DISABLE_ICONV) "no")
                                                                   ;; these are for Windows:
                                                                   'runtimeAs "static"
                                                                   'linkAs "exe"
                                                                   'kernelLibName "kernel")))
                   (build (find-target (if cross? "kernel" "build") m-targets) token)

                   (unless cross?
                     (build (find-target check-bootstrap-same-stamp the-targets)
                            token)))]
       
       ,@(cond
           [(not (equal? (or (lookup 'BOOTFILE_RACKET) "") ""))
            ;; use `BOOTFILE_RACKET` to build boot files
            `([:target bootfiles ()
                       ,(lambda (token)
                          (define bootfile-racket (lookup 'BOOTFILE_RACKET))
                          (define racket.exe (if (relative-path? bootfile-racket)
                                                 (if (not (car (split-path bootfile-racket)))
                                                     (find-executable-path bootfile-racket)
                                                     (at-dir bootfile-racket))
                                                 bootfile-racket))
                          ;; "rktboot/main.rkt" performs it's own timestamp-based "make"
                          (process/wait racket.exe
                                        (setup-boot "--chain" "compiled/rktboot")
                                        (at-source "../../ChezScheme/rktboot/main.rkt")
                                        "--scheme-src" (at-source "../../ChezScheme")
                                        "--dest" (at-dir CS)
                                        "--machine" m))])]
           [(equal? (lookup 'RACKET) "auto")
            ;; assuming "auto" is built before we get here
            `([:target bootfiles ()
                       ,(lambda (token)
                          (mkdir-p (at-dir CS m))
                          (display-to-file "" (at-dir CS m "Mf-config") :truncate)
                          (define host-m-targets (scheme-targets-at (make-at-dir (at-dir CS m))
                                                                    (hash-set* config
                                                                               'm host-m)))
                          (build (command-target->target (find-target "bootquick" host-m-targets)
                                                         (list "--host-workarea"
                                                               (at-dir "local/cs/c/ChezScheme" host-m)
                                                               m))
                                 token))])]
           [(directory-exists? (at-source "../../ChezScheme/boot/pb"))
            ;; pb bootstrap mode: build pb to build machine-specific bootfiles
            `([:target bootfiles ()
                       ,(lambda (token)
                          (mkdir-p (at-dir CS "pb/c"))
                          (display-to-file "" (at-dir CS "pb/Mf-config") :truncate)
                          (define pb-targets (scheme-targets-at (make-at-dir (at-dir CS "pb"))
                                                                (hash-set* config
                                                                           'm "pb"
                                                                           'defaultm m)))
                          (build (find-target "reset" pb-targets) token)
                          (build (command-target->target (find-target "bootquick" pb-targets)
                                                         (list m))
                                 token))])]
           [else
            (error "no route to initial bootfiles")])

       ;; used to double-check that a pb-based build produced boot files that
       ;; were already at a fixed point
       [:target ,check-bootstrap-same-stamp (,petite.boot ,scheme.boot)
                ,(lambda (path token)
                   (scheme "--script" (at-source "same-boot.ss") (at-dir CS "boot" m "petite.boot") petite.boot)
                   (scheme "--script" (at-source "same-boot.ss") (at-dir CS "boot" m "scheme.boot") scheme.boot)
                   (fd-close (fd-open-output check-bootstrap-same-stamp :truncate)))]

       [:target ,petite-v.boot (,petite-chunked.boot)
                ,(lambda (path target)
                   (scheme "--script" (at-source "to-vfasl.ss") boot-compress-flags xpatch-args
                           petite-chunked.boot petite-v.boot))]
       [:target ,scheme-v.boot (,scheme-chunked.boot)
                ,(lambda (path target)
                   (scheme "--script" (at-source "to-vfasl.ss") boot-compress-flags xpatch-args
                           scheme-chunked.boot scheme-v.boot
                           "petite"))]
       [:target ,racket-v.boot (,racket-chunked.boot)
                ,(lambda (path target)
                   (scheme "--script" (at-source "to-vfasl.ss") boot-compress-flags xpatch-args
                           racket-chunked.boot racket-v.boot
                           "petite" "scheme"))]

       [:target ,rres.o (,(at-source "../../worksp/racket/racket.rc")
                         ,(at-source "../../worksp/racket/racket.ico")
                         ,(at-source "../../version/racket_version.h"))
                ,(lambda (path target)
                   (windres (at-source "../../worksp/racket/racket.rc")
                            path))]
       [:target ,grres.o (,(at-source "../../worksp/gracket/gracket.rc")
                          ,(at-source "../../worksp/gracket/gracket.ico")
                          ,(at-source "../../version/racket_version.h"))
                ,(lambda (path target)
                   (windres (at-source "../../worksp/gracket/gracket.rc")
                            path))]
       [:target ,libres.o (,(at-source "../../worksp/cs/libracket.rc")
                           ,(at-source "../../version/racket_version.h"))
                ,(lambda (path target)
                   (windres (at-source "../../worksp/cs/libracket.rc")
                            path))]

       ,@(if windows?
             `([:target ,(at-dir "cs_config.h") (,(at-source "../../worksp/cs/cs_config.h"))
                        ,(lambda (path target)
                           (cp (at-source "../../worksp/cs/cs_config.h") path))])
             '())

       ,@(if pbchunk?
             `([:target (,@pbchunk-srcs ,petite-chunked.boot ,scheme-chunked.boot ,racket-chunked.boot)
                        (,petite.boot ,scheme.boot ,racket.boot)
                        ,(lambda (path token)
                           (scheme "--script" (at-source "to-pbchunk.ss")
                                   boot-compress-flags xpatch-args
                                   "--dest" (at-dir ".")
                                   petite.boot scheme.boot racket.boot))]
               ,@(map (lambda (.c)
                        `[:target ,(.c->.o .c) (,.c)
                                  ,(lambda (path token)
                                     (c-compile path
                                                .c
                                                (config-define (config-include config
                                                                               (at-dir CS m "boot" m)
                                                                               (at-dir CS m "c")
                                                                               (at-source "../../ChezScheme/c"))
                                                               "PORTABLE_BYTECODE")))])
                      pbchunk-srcs))
             '())

       [:target install ()
                ,(lambda (token)
                   (install token #t))]

       [:target plain-install ()
                ,(lambda (token)
                   (install token #f))]

       [:db-dir ,(at-dir "compiled")])))

  (define (install token setup?)
    (define (upcase s)
      (let loop ([i 0] [start 0])
        (cond
          [(= i (string-length s)) (substring s start)]
          [(and (>= (string-ref s i) (char "a"))
                (<= (string-ref s i) (char "z")))
           (~a (substring s start i) (string (+ (string-ref s i) (- (char "A") (char "a"))))
               (loop (+ i 1) (+ i 1)))]
          [else (loop (+ i 1) start)])))
    
    (define (at-destdir p) p)
    (define (cs-suffix p) (~a p (or (lookup 'CS_INSTALLED) "")))
    (define (CS-suffix p) (~a p (upcase (or (lookup 'CS_INSTALLED) ""))))

    (define (icp src dest)
      (if (eq? 'windows (system-type))
          (cp src dest)
          (shell/wait (build-shell (lookup 'ICP) (string->shell src) (string->shell dest)))))
    (define (icp-r src dest)
      (if (eq? 'windows (system-type))
          (cp* src dest)
          (shell/wait (build-shell (lookup 'ICP) "-r" (string->shell src) (string->shell dest)))))
    (define (icp-lib src dest)
      (if (eq? 'windows (system-type))
          (cp src dest)
          (shell/wait (build-shell (lookup 'ICP_LIB) (string->shell src) (string->shell dest)))))
    (define (strip-debug path)
      (unless windows?
        (shell/wait (build-shell (lookup 'STRIP_DEBUG) (string->shell path)))))
    (define (strip-lib-debug path)
      (unless windows?
        (shell/wait (build-shell (lookup 'STRIP_LIB_DEBUG) (string->shell path)))))
    
    (define bindir (if msvc?
                       (at-source "../../..")
                       (at-destdir (shell-subst (lookup 'bindir) config))))
    (define libdir (if msvc?
                       (at-source "../../../lib")
                       (at-destdir (shell-subst (lookup 'libdir) config))))
    (define libpltdir (if msvc?
                          libdir
                          (at-destdir (shell-subst (lookup 'libpltdir) config))))
    (define includepltdir (if msvc?
                              (at-source "../../../include")
                              (at-destdir (shell-subst (lookup 'includepltdir) config))))
    (define collectsdir (if msvc?
                            (at-source "../../../collects")
                            (at-destdir (shell-subst (lookup 'collectsdir) config))))
    (define configdir (if msvc?
                          (at-source "../../../etc")
                          (at-destdir (shell-subst (lookup 'configdir) config))))
    
    (mkdir-p bindir)
    (mkdir-p libpltdir)
    (mkdir-p includepltdir)

    (define dest-racket (build-path bindir (if windows?
                                               (~a (CS-suffix "Racket") ".exe")
                                               (cs-suffix "racket"))))

    (cond
      [windows?
       (define (icp/strip src dest)
         (icp src dest)
         (strip-debug dest))
       (icp/strip libracketcsxxxxxxx.dll (build-path libdir (file-name-from-path libracketcsxxxxxxx.dll)))
       (icp/strip racketcs dest-racket)
       (icp/strip gracketcs (build-path libdir (~a (CS-suffix "GRacket") ".exe")))
       (icp/strip MzStart.exe (build-path libpltdir (file-name-from-path MzStart.exe)))
       (icp/strip MrStart.exe (build-path libpltdir (file-name-from-path MrStart.exe)))]
      [else
       (define dest-starter (build-path libpltdir "starter"))

       (rm* dest-racket)
       (rm* (build-path libpltdir "starter-sh"))
       (rm* dest-starter)

       (icp racketcs dest-racket)
       (strip-signature dest-racket)
       (strip-debug dest-racket)
       (restore-signature dest-racket)

       (icp (at-source "../../start/starter-sh") (build-path libpltdir "starter-sh"))

       (icp "starter" dest-starter)
       (strip-signature dest-starter)
       (strip-debug dest-starter)
       (set-collects-path dest-starter (lookup 'COLLECTS_PATH) (lookup 'CONFIG_PATH))
       (restore-signature dest-starter)])

    (install-racket (at-source "gen-system.rkt")
                    (build-path libpltdir (~a (cs-suffix "system") ".rktd"))
                    m (or (lookup 'KERNEL_TARGET_MACH) m)
                    (or (lookup 'CROSS_COMPILE_TARGET_KIND) "machine")
                    (at-source ".")
                    (or (lookup 'PLT_CS_SLSP_SUFFIX) ""))
    
    (icp (at-source "api.h") (build-path includepltdir "racketcs.h"))
    (icp (at-source "boot.h") (build-path includepltdir "racketcsboot.h"))
    (icp (at-dir CS m "boot" m "scheme.h") (build-path includepltdir "chezscheme.h"))
    
    (unless (or windows? (equal? "no-install" (lookup 'INSTALL_LIBS_ENABLE)))
      (define repack-dir (at-dir "repack"))
      (define libracketcs.a (at-dir "libracketcs.a"))
      (rm* repack-dir)
      (mkdir-p repack-dir)
      (define (unpack-lib lib)
        (shell/wait (build-shell (lookup 'AR) "x" (find-relative-path repack-dir lib))
                    (hash 'dir repack-dir)))
      (when (equal? (or (lookup 'Z_LIB) "") "")
        (unpack-lib (at-dir CS m "zlib/libz.a")))
      (when (equal? (or (lookup 'LZ4_LIB) "") "")
        (unpack-lib (at-dir CS m "lz4/lib/liblz4.a")))
      (unpack-lib (target->path librktio.a))
      (unpack-lib (at-dir CS m "boot" m "libkernel.a"))
      (shell/wait (build-shell (lookup 'AR) (lookup 'ARFLAGS) libracketcs.a
                               (filter (glob->matcher "*.o") (ls* repack-dir))
                               boot.o))
      (icp-lib libracketcs.a (build-path libdir "libracketcs.a"))
      (strip-lib-debug (build-path libdir "libracketcs.a")))

    (cond
      [mac?
       (define dest-framework-dir (shell-subst (lookup 'FRAMEWORK_INSTALL_DIR) config))
       (define fw-vers-dir (build-path dest-framework-dir "Versions" (~a version "_CS")))
       (define dest-racket (build-path bindir (cs-suffix "racket")))
       (define framework-prefix (cond
                                  [(not (equal? (lookup 'FRAMEWORK_REL_INSTALL) "yes")) ""]
                                  [(relative-path? dest-framework-dir)
                                   (~a "@executable_path/../" (shell-subst (lookup 'libpltdir_rel) config) "/")]
                                  [else (~a libpltdir "/")]))

       ;; Framework and `racket` install
       (rm* (build-path dest-framework-dir "Racket"))
       (rm* fw-vers-dir)
       (when (equal? (lookup 'FRAMEWORK_REL_INSTALL) "yes")
         (install-racket (at-source "../../mac/clean-fw.rkt") dest-framework-dir))
       (mkdir-p fw-vers-dir)
       (cp framework (build-path fw-vers-dir "Racket"))
       (mkdir-p (build-path fw-vers-dir "boot"))
       (map (lambda (x.boot)
              (cp (build-path framework-dir "boot" x.boot) (build-path fw-vers-dir "boot" x.boot)))
            '("petite.boot" "scheme.boot" "racket.boot"))
       (strip-signature dest-racket)
       (set-collects-path dest-racket (lookup 'COLLECTS_PATH) (lookup 'CONFIG_PATH))
       (install_name_tool "-change"
                          (~a "@executable_path/Racket.framework/Versions/" version "_CS/Racket")
                          (~a framework-prefix "Racket.framework/Versions/" version "_CS/Racket")
                          dest-racket)
       (restore-signature dest-racket)

       ;; `GRacket.app` install
       (define gracket-app-dest (build-path libpltdir (~a (CS-suffix "GRacket") ".app")))
       (define dest-gracket (build-path gracket-app-dest "Contents/MacOS" (CS-suffix "GRacket")))
       (rm* gracket-app-dest)
       (icp-r (at-dir "GRacketCS.app") gracket-app-dest)
       (bootstrap-racket (at-source "../../mac/rename-app.rkt")
                         gracket-app-dest "GRacketCS" (CS-suffix "GRacket")
                         "no-up")
       (install_name_tool "-change"
                          (~a "@executable_path/../../../../Racket.framework/Versions/" version "_CS/Racket")
                          (~a framework-prefix "Racket.framework/Versions/" version "_CS/Racket")
                          dest-gracket)
       (strip-signature dest-gracket)
       (set-collects-path dest-gracket "../../../../collects" "../../../../etc")
       (strip-debug dest-gracket)
       (restore-signature dest-gracket)

       (define starter-app-dest (build-path libpltdir "Starter.app"))
       (rm* starter-app-dest)
       (icp-r (at-dir "Starter.app") starter-app-dest)
       (unless (equal? "no-install" (lookup 'INSTALL_LIBS_ENABLE))
         (map (lambda (name)
                (bootstrap-racket (at-source "add-terminator.rkt")
                                  (build-path fw-boot-dest-dir name)
                                  (build-path libpltdir name)))
              (list "petite.boot" "scheme.boot" "racket.boot")))]
      [windows?
       (void)]
      [else
       (define dest-gracket (build-path libpltdir (cs-suffix "gracket")))
       (icp gracketcs dest-gracket)
       (strip-signature dest-racket)
       (strip-signature dest-gracket)
       (set-collects-path dest-racket (lookup 'COLLECTS_PATH) (lookup 'CONFIG_PATH))
       (set-collects-path dest-gracket (lookup 'COLLECTS_PATH) (lookup 'CONFIG_PATH))
       (restore-signature dest-racket)
       (restore-signature dest-gracket)
       (unless (equal? "no-install" (lookup 'INSTALL_LIBS_ENABLE))
         (map (lambda (v.boot .boot)
                (bootstrap-racket (at-source "add-terminator.rkt") v.boot
                                  (build-path libpltdir .boot)))
              (list petite-v.boot scheme-v.boot racket-v.boot)
              (list "petite.boot" "scheme.boot" "racket.boot")))])

    (when cross?
      ;; These two files don't get installed anywhere, because they're
      ;; not part of a distribution, but a distro build expects them
      ;; to be created in the directory where Racket was cross-built
      (define compile-xpatch (at-dir (~a "compile-xpatch." m)))
      (define library-xpatch (at-dir (~a "library-xpatch." m)))
      (scheme/options (hash 'dir (at-dir "."))
                      (list "--script"
                            (find-relative-path (at-dir ".") (at-source "mk-cross-serve.ss"))
                            (find-relative-path (at-dir ".") (at-source "."))
                            "cross-serve.ss"
                            (find-relative-path (at-dir ".") (at-source "../expander/env.ss"))))
      (display-to-file (~a (file->string (at-dir "cross-serve.so"))
                           (file->string xpatch))
                       compile-xpatch
                       :truncate)
      (display-to-file (apply ~a
                              (map (lambda (name)
                                     (file->string (at-dir (~a name "." host-m))))
                                   '("chezpart" "rumble" "thread" "io"
                                                "regexp" "schemify" "linklet" "expander")))
                       library-xpatch
                       :truncate))

    (when setup?
      ;; Run `raco setup`.
      (define (extras key) (shell->strings (or (lookup key) "")))
      ;; A distribution build can set `SELF_ROOT_CONFIG_DIR` to make the
      ;; setup config different from the result distribution's config, etc.
      (define self-root-config-dir (or (lookup 'SELF_ROOT_CONFIG_DIR) ""))
      (define setup-any-zo-dir (or (lookup 'SETUP_ANY_ZO_DIR) ""))
      (define self-root-config-flags (if (equal? self-root-config-dir "")
                                         '()
                                         (list "-G" self-root-config-dir)))
      (define setup-args (list
                          "-N" "raco" "-l-" "setup"
                          (extras 'INSTALL_SETUP_FLAGS)
                          (extras 'PLT_SETUP_OPTIONS_FLAGS)))
      (cond
        [(not cross?)
         (process/wait dest-racket
                       self-root-config-flags
                       "-X" collectsdir
                       "-G" configdir
                       (if (equal? setup-any-zo-dir "")
                           '()
                           (list "-MCR" (~a setup-any-zo-dir ":")))
                       setup-args)]
        [else
         (racket (config-bootstrap-racket)
                 self-root-config-flags
                 "-MCR" (~a (at-dir "compiled") ":")
                 "--cross-compiler" m (at-dir ".")
                 "-X" collectsdir
                 "-G" configdir
                 setup-args)])))

  the-targets)
