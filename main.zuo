#lang zuo
(require "racket/src/lib.zuo")

(provide-targets targets-at)

;; We ignore the `at-dir` argument and instead do everything
;; relative to the source directory
(define (targets-at at-dir-ignored [vars (hash)])
  (define config (config-file->hash (at-source "Makefile") vars))
  (define (lookup key [default ""]) (hash-ref config key default))
  (define (lookup! key) (or (hash-ref config key #f)
                            (error "required configuraiton entry is missing" key)))

  (define build-config.rktd (at-source "build/config/config.rktd"))

  (define vm (string->symbol (lookup 'VM "cs")))

  ;; Needed for any distribution:
  (define required-pkgs '("racket-lib"))
  (define default-src-catalog "https://pkgs.racket-lang.org")

  (define (get-jobs)
    (define cpus (let ([s (lookup 'CPUS)])
                   (and (not (equal? s ""))
                        s)))
    (define jobs (or cpus
                     (let ([s (lookup 'JOBS)])
                       (and (not (equal? s ""))
                            s))))
    (define n-jobs (and jobs (string->integer jobs)))
    (when (and jobs
               (or (not n-jobs)
                   (< n-jobs 1)))
      (error (~a (if cpus "CPUS" "JOBS") "is not a positive integer" jobs)))
    (or n-jobs
        (infer-gnu-make-jobs)))

  (define (build-options)
    (define n-jobs (get-jobs))
    (if n-jobs
        (hash 'jobs n-jobs)
        (hash)))

  (define (setup-options)
    (define opts (lookup 'PLT_SETUP_OPTIONS))
    (define jobs (get-jobs))
    (if jobs
        (build-shell opts "-j" (~a jobs))
        opts))

  (define (pb-manage step)
    (define boot-dir (at-source "racket/src/ChezScheme/boot"))
    (define pb-dir (build-path boot-dir "pb"))
    (define branch (lookup! 'PB_BRANCH))
    (cond
      [(eq? step 'fetch)
       (mkdir-p boot-dir)
       (if (directory-exists? pb-dir)
           (shell/wait "git fetch -q origin" (~a branch ":remotes/origin/" branch)
                       (hash 'dir pb-dir))
           (shell/wait "git clone -q" (lookup 'SINGLE_BRANCH_FLAG)
                       "-b" branch (string->shell (lookup! 'PB_REPO))
                       (string->shell pb-dir)))
       (shell/wait "git remote set-branches origin" branch
                   (hash 'dir pb-dir))
       (shell/wait "git checkout -q" branch
                   (hash 'dir pb-dir))]
      [(eq? step 'build)
       (shell/wait "racket rktboot/main.rkt --machine pb"
                   (hash 'dir (at-source "racket/src/ChezScheme")))]
      [(eq? step 'stage)
       (define options (hash 'dir pb-dir))
       (shell/wait "git branch" branch options)
       (shell/wait "git checkout" branch options)
       (shell/wait "git add . && git commit --amend --reset-author -m" (string->shell "new build")
        options)]
      [(eq? step 'push)
       (shell/wait "git push -u origin" branch
                   (hash 'dir pb-dir))]
      [else
       (error "unknown pb step" step)]))

  ;; non-#f prefix implies Unix-style build:
  (define (build-base subdir token also? [prefix #f])
    (define targets
      (configured-targets-at (hash
                              'configure (if (eq? 'windows (system-type))
                                             (at-source "racket/src" subdir "winfig.bat")
                                             (at-source "racket/src" subdir "configure"))
                              'inputs (list (at-source "racket/src" subdir "Mf-config.in"))
                              'outputs (list (at-source "racket/src/build" subdir "Mf-config"))
                              'configure-args (append
                                               (shell->strings (lookup 'CONFIGURE_ARGS_qq))
                                               (shell->strings (lookup 'CONFIGURE_ARGS))
                                               (cond
                                                 [(eq? 'windows (system-type)) '()]
                                                 [prefix (list (~a "--prefix=" prefix)
                                                               "--enable-macprefix")]
                                                 [else '("--disable-useprefix"
                                                         "--enable-origtree")]))
                              'vars (hash
                                     ;; causes the `raco setup` step to not build
                                     ;; installed packages (unless `prefix`):
                                     'SELF_ROOT_CONFIG_DIR (if prefix
                                                               ""
                                                               (path-only build-config.rktd))
                                     'PLT_SETUP_OPTIONS (build-shell
                                                         (if also? "-D" "")
                                                         (setup-options))
                                     'DESTDIR (if prefix
                                                  (lookup 'DESTDIR "")
                                                  "")
                                     ;; for a unix-style install, we'll run any needed
                                     ;; `DESTDIR` fixes later:
                                     'SKIP_DESTDIR_FIX "skip"
                                     ;; Propagate `RACKET` and similat
                                     'RACKET (let ([r (lookup 'RACKET)])
                                               (if (equal? r "")
                                                   (lookup 'PLAIN_RACKET)
                                                   r))
                                     'BOOTFILE_RACKET (lookup 'BOOTFILE_RACKET)
                                     'SCHEME (lookup 'SCHEME)
                                     'SCHEME_DIR (lookup 'SCHEME_DIR)))))
    (build (find-target "build" targets)
           #f
           (build-options))
    (build (find-target "install-again" targets)
           #f
           (build-options)))

  (define (find-racket vm)
    (define sfx (if (eq? vm 'cs)
                    (lookup 'RACKETCS_SUFFIX)
                    (lookup 'RACKETBC_SUFFIX)))
    (define racket.exe
      (cond
        [(eq? 'windows (system-type))
         (at-source "racket" (~a "Racket" (string-upcase sfx) ".exe"))]
        [else
         (at-source "racket/bin" (~a "racket" sfx))]))
    (hash 'racket racket.exe
          'racket-args (append (shell->strings (lookup 'SETUP_MACHINE_FLAGS))
                               (list "-G" (at-source "racket/etc")
                                     "-X" (at-source "racket/collects")))))
  
  (define (setup vm . args)
    (raco (find-racket vm)
          "setup"
          args
          (shell->strings (setup-options))))

  (define (maybe-fetch vm)
    (when (eq? vm 'cs)
      (when (andmap (lambda (key) (equal? (lookup key) ""))
                    '(RACKET PLAIN_RACKET SCHEME SCHEME_DIR))
        (pb-manage 'fetch))))

  (define (base token vm [also? #f] [prefix #f])
    (build/dep (find-target build-config.rktd the-targets) token)
    (cond
      [(eq? vm 'cs)
       (build-base "cs/c" token also? prefix)]
      [else
       (build-base "bc" token also? prefix)]))

  (define (unix-style token vm)
    (define prefix (lookup! 'PREFIX))
    (when (equal? prefix "")
      (error "supply PREFIX=<prefix> for a unix-style installation"))
    (maybe-fetch vm)
    ;; builds and installs to `DESTDIR` plus `prefix`
    (base token vm #f prefix)
    ;; run installed `raco` and `racket`
    (define raco (at-destdir vars (build-path prefix "bin" "raco")))
    (define racket (at-destdir vars (build-path prefix "bin" "racket")))
    ;; setup installed catalog
    (define src-catalog (lookup 'SRC_CATALOG))
    (unless (equal? src-catalog default-src-catalog)
      (process/wait raco "pkg" "config" "-i"
                    "--set" "catalogs" src-catalog ""))
    (define loc-catalog (at-source "build/local/pkgs-catalog"))
    (define unix-catalog (at-source "build/local/catalog"))
    (process/wait racket "-l-" "pkg/dirs-catalog" "--check-metadata" loc-catalog "pkgs")
    (process/wait raco "pkg" "catalog-copy" "--force" "--from-config" loc-catalog
                  unix-catalog)
    ;; install packages
    (define jobs (get-jobs))
    (process/wait raco "pkg" "install"
                  (if jobs (list "-j" (~a jobs)) '())
                  "--catalog" unix-catalog "--auto" "-i"
                  required-pkgs
                  (shell->strings (lookup 'PKGS)))
    ;; destdir fixups
    (define at-vm-dir (make-at-dir (at-source "racket/src/build" (if (eq? vm 'cs) "cs/c" "bc"))))
    (define config (config-file->hash (at-vm-dir "Mf-config") vars))
    (maybe-libzo-move config racket #f at-vm-dir)
    (maybe-destdir-fix config racket #f at-vm-dir))

  (define (as-is token vm)
    (base token vm)
    (setup vm))

  (define (in-place token vm [also? #f] [setup-extra-args ""])
    (maybe-fetch vm)
    (base token vm also?)

    (define vars (find-racket vm))
    (define jobs (get-jobs))

    (unless also?
      (racket vars
              (list "-U" "-G" (path-only build-config.rktd)
                    "-l-" "pkg/dirs-catalog"
                    "--link" "--check-metadata" "--immediate"
                    (at-source "racket/share/pkgs-catalog")
                    (at-source "pkgs")
                    (at-source "racket/src/expander")
                    (at-source "racket/src/zuo/zuo-doc")))
      (racket vars
              (list "-U" "-G" (path-only build-config.rktd)
                    (at-source "racket/src/pkgs-config.rkt")
                    default-src-catalog
                    (lookup 'SRC_CATALOG)))
      (racket vars
              (at-source "racket/src/pkgs-check.rkt")
              (at-source "racket/share/pkgs-catalog"))

      (raco vars "pkg" "update"
            "--all" "--auto" "--no-setup" "--scope" "installation"
            (shell->strings (lookup 'PKG_UPDATE_OPTIONS)))
      (raco vars "pkg" "install"
            (if jobs (list "-j" (~a jobs)) '())
            "--no-setup" "--pkgs" "--skip-installed" "--scope" "installation"
            "--deps" "search-auto"
            required-pkgs
            (shell->strings (lookup 'PKGS)))
      (setup vm "--only-foreign-libs"))

    (setup vm (shell->strings setup-extra-args)))

  (define the-targets
    (make-targets
     `([:target in-place () ,(lambda (token) (in-place token vm))]
       [:target as-is () ,(lambda (token) (as-is token vm))]
       [:target base () ,(lambda (token) (maybe-fetch vm) (base token vm))]
       [:target unix-style () ,(lambda (token) (unix-style token vm))]

       [:target both () ,(lambda (token)
                           (in-place token vm #f "--error-out build/step")
                           (in-place token (if (eq? vm 'cs) 'bc 'cs) #t "--error-in build/step"))]
       
       [:target cs () ,(lambda (token) (in-place token 'cs))]
       [:target cs-base () ,(lambda (token) (maybe-fetch vm) (base token 'cs))]
       [:target cs-as-is () ,(lambda (token) (as-is token 'cs))]
       [:target cs-in-place () ,(lambda (token) (in-place token 'cs))]
       [:target also-cs () ,(lambda (token) (in-place token 'cs #t))]
       [:target cs-unix-style () ,(lambda (token) (unix-style token 'cs))]

       [:target bc () ,(lambda (token) (in-place token 'bc))]
       [:target bc-base () ,(lambda (token) (maybe-fetch vm) (base token 'bc))]
       [:target bc-as-is () ,(lambda (token) (as-is token 'bc))]
       [:target bc-in-place () ,(lambda (token) (in-place token 'bc))]
       [:target also-bc () ,(lambda (token) (in-place token 'bc #t))]
       [:target bc-unix-style () ,(lambda (token) (unix-style token 'bc))]

       [:target pb-fetch () ,(lambda (token) (pb-manage 'fetch))]
       [:target pb-build () ,(lambda (token) (pb-manage 'build))]
       [:target pb-stage () ,(lambda (token) (pb-manage 'stage))]
       [:target pb-push () ,(lambda (token) (pb-manage 'push))]

       [:target ,build-config.rktd ()
                ,(lambda (path token)
                   (mkdir-p (path-only path))
                   (display-to-file "#hash((links-search-files . ()))\n"
                                    path
                                    :truncate))])))

  the-targets)
